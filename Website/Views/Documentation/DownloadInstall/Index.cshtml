@using ViewExtensions
@using JSNLog.Infrastructure

@{
    ViewBag.Title = "Installation";
    ViewBag.Key = "downloadinstall";
    ViewBag.Description = "How to download and install JSNLog.";
    ViewBag.Order = "100";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";

    string currentVersion = PageVersions.CurrentVersion();
}

@if (currentVersion == "NetJs")
{
    bool isNetCore;
    bool isNetFramework;
    PageVersions.GetPageVersion(out isNetCore, out isNetFramework);

    if (isNetCore)
    {
        <p>
            Shows how to implement JavaScript logging in your ASP.NET Core web site.
        </p>
        <ul>
            <li>
                @* Logging objects using Serilog doesn't work in Release mode (but it does work in Debug mode!) in netstandard1.6. This problem goes away in .Net Core 2. *@
                JSNLog works with both .NETStandard 2.0 or better, and .Net 4.5.2 or better.
            </li>
            <li>
                <a href="@SiteConstants.DemoGithubUrlNetCore" target="_blank">ASP.NET Core demos</a>
            </li>
        </ul>


        <h2>1. Install JSNLog NuGet package</h2>
        @Html.Partial("_InstallPackageCore")
        <p />

        <h2>2. Add JSNLog to the request pipeline</h2>

        <p>
            Call <span class="term">UseJSNLog</span> in the <span class="term">Configure</span> method
            in your <span class="term">Startup</span> class,
            before any calls to <span class="term">UseStaticFiles</span> or <span class="term">UseAuthorization</span>.
        </p>
        @Html.Partial("_AddUseJsnlogToCorePipeline")

        <p>
            This takes care of:
        </p>
        <ul class="large-items">
            <li>
                Processing all log messages generated by JavaScript on the client. This is why
                <span class="term">UseJSNLog</span> has to come before
                <span class="term">UseStaticFiles</span> and <span class="term">UseAuthorization</span>.
            </li>
            <li>
                Letting you configure JSNLog
                <text>(</text>@Html.ViewLink("webconfig", "how")<text>)</text>
            </li>
            <li>
                For all HTML responses, inserting a script tag and some JavaScript code right before the closing
                <span class="term">&lt;/body&gt;</span> tag to add JSNLog on the page.
            </li>
        </ul>

        <h2>3. Done</h2>
        <p>
            Uncaught JavaScript exceptions will now be logged in your server side logs
            if your application targets netcoreapp3.0 or higher.
            <a id="netcoreapp2">
                Steps if your application targets netcoreapp2.0 or netcoreapp2.0
            </a>
        </p>

        <p>Next steps:</p>

        <ul>
            <li>
                @Html.ViewLink("getstartedlogging", "Introduction to client side logging")
            </li>
            <li>
                @Html.ViewLink("webconfig", "Configuration options")
            </li>
        </ul>

        <h2>How to load jsnlog.js from an alternative url</h2>

        <p>
            <span class="term">UseJSNLog</span>
            by default inserts a script tag that loads the jsnlog.js library from a CDN at:
        </p>
        <pre>@SiteConstants.CdnJsDownloadUrl</pre>

        <p>
            To
            load jsnlog.js from another location,
            configure the required location
            in the call to <span class="term">UseJSNLog</span>:
        </p>
        <pre>public void Configure(..., ILoggerFactory loggerFactory)
{
  ...
  app.UseJSNLog(loggerFactory<span class="addedcode">, new JsnlogConfiguration()
  {
    insertJsnlogInHtmlResponses = true,
    productionLibraryPath = "/lib/jsnlog/jsnlog.js"
  }</span>);
  ...
</pre>

        <h2>When and how to stop insertion of JSNLog in HTML responses</h2>

        <p>
            As you saw, <span class="term">UseJSNLog</span> automatically inserts
            JSNLog in HTML responses by default.
            However, there are
            <a href="#alternatives-to-automatic-insertion">alternative ways to load JSNLog onto the page</a>.
            You may want to use these for a number of reasons:
        </p>

        <ul class="large-items">
            <li>
                JavaScript runs before page is loaded -
                <span class="term">UseJSNLog</span> inserts JSNLog at the end of the page, just before the
                <span class="term">&lt;/body&gt;</span> tag. This means that if JavaScript is being executed while the page loads,
                JSNLog will not yet have been loaded and so any JavaScript exceptions will not be sent to the server.
            </li>
            <li>
                Need to load jsnlog.js from a module -
                <span class="term">UseJSNLog</span>
                inserts a script tag to load the jsnlog.js library.
                You may want to load the jsnlog.js library as a module rather than via a script tag.
            </li>
            <li>
                Multiple instances of <span class="term">&lt;/body&gt;</span> on the page (unlikely) -
                <span class="term">UseJSNLog</span>
                essentially watches the byte stream of the response and detects the first occurence of
                <span class="term">&lt;/body&gt;</span>.
                If for some reason the page contains the text &quot;&lt;/body&gt;&quot;
                before the actual end of the body, it may insert JSNLog in the wrong place.
                Note that all user generated text should be HTML escaped, in which case user generated text would not cause this problem.
            </li>
            <li>
                <span class="term">&lt;/body&gt;</span>
                split over multiple buffers (unlikely) -
                <span class="term">UseJSNLog</span> copies the response stream to the browser
                using a buffer. If the <span class="term">&lt;/body&gt;</span> tag is split over two buffers,
                it will fail to detect it and not insert JSNLog on the page.
            </li>
            <li>
                <a id="netcoreapp2"></a>netcoreapp2.0 or netcoreapp2.1 -
                If your application uses one of these targets, it will use the netstandard2.0 version of JSNLog.
                This does not support automatically inserting JSNLog on HTML pages.
            </li>
        </ul>

        <p>
            To stop automatic insertion of JSNLog in HTML responses,
            set the
            <span class="term">JsnlogConfiguration</span>
            property
            <span class="term">insertJsnlogInHtmlResponses</span>
            to false.
            Also set the <span class="term">productionLibraryPath</span> property to ensure the script tag still gets generated:
        </p>
        <pre>public void Configure(..., ILoggerFactory loggerFactory)
{
  ...
  app.UseJSNLog(loggerFactory<span class="addedcode">, new JsnlogConfiguration()
  {
    insertJsnlogInHtmlResponses = false,
    productionLibraryPath = "@SiteConstants.CdnJsDownloadUrl"
  }</span>);
  ...
</pre>

        <a id="alternatives-to-automatic-insertion"></a>
        <h2>If you do not use automatic insertion</h2>

        <h3>Use tag helper to do the insertion</h3>

        <p>
            You will have to do the insertion yourself, using the
            @Html.ViewLink("jl-javascript-logger-definitions-taghelper", "jl-javascript-logger-definitions tag helper")<text>:</text>
        </p>
        <pre>@*Insert jsnlog.js script tag and client side configuration code*@
&lt;jl-javascript-logger-definitions /&gt;</pre>

        <p>
            Because this simply generates script tags, you can use this in the head of the HTML page as well as the body.
        </p>
        <p>
            Your <span class="term">_Layout.cshtml</span> file
            would be a great place for this.
        </p>

        <h3>To load jsnlog.js as a module</h3>

        <ul class="large-items">
            <li>
                Set the <span class="term">productionLibraryPath</span> property to null to prevent generation of the script tag:
                        <p>
                            <pre>public void Configure(..., ILoggerFactory loggerFactory)
{
  ...
  app.UseJSNLog(loggerFactory, new JsnlogConfiguration()
  {
    insertJsnlogInHtmlResponses = false,
    <span class="addedcode">productionLibraryPath = null</span>
  });
  ...
</pre>
                        </p>
            </li>
            <li>
                @Html.ViewLink("getstarted-loadingjsfile", "Options to load jsnlog.js as a module")
            </li>
<li>
    If you decide to load jsnlog.js as a module, your application is probably JavaScript centric.
    <p>
        Out of the box, JSNLog does not need configuration beyond what is shown on this page.
        But you do have many configuration options, which can mostly be set both server side and client side
        <text>(</text>@Html.ViewLink("webconfig", "details")<text>)</text>.
    </p>
</li>
        </ul>

}

if (isNetFramework)
{
<a name="additional"></a>
<h2> 1.Install adapter for your logging package</h2>

<p>
    JSNLog needs an adapter to work with your specific logging package(Serilog, NLog, Log4Net, etc.)
    </p>
<p>
    Install one of the packages below to add the correct adapter to your web application.
    This also installs JSNLog itself if you haven't already done so.
</p>

<p>
                <a data-toggle="collapse" href="#collapseVS2013" aria-expanded="false" aria-controls="collapseVS2013">Click here if you use Visual Studio 2013 or older</a>
</p>
<div class="collapse" id="collapseVS2013">
                <p>
        These packages contain dependencies for both ASP.NET Framework and ASP.NET Core.
        However, versions below 2.8.60318.667 of the NuGet Package Manager installed in Visual Studio do not support this.
    </p>
                <p>
        To check your Nuget version and upgrade if needed:
    </p>
                <ol>
                <li>
            In Visual Studio, open<span class="term">Tools</span> | <span class="term">Extensions and Updates...</span>;
        </li>
                <li>
            Click<span class="term">Updates</span>(in left hand menu);
        </li>
                <li>
            If an update of NuGet Package Manager is available, click<span class="term">Update</span>.
            </li>
    </ol>
</div>

<table class="table">
                <tr>
                <th>If you use</th>
                <th>Install this package</th>
    </tr>
                <tr>
                <td>Log4Net</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.Log4Net/" target="_blank"> Install - Package JSNLog.Log4Net</a></td>
    </tr>
                <tr>
                <td>NLog</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.NLog/" target="_blank"> Install - Package JSNLog.NLog</a></td>
    </tr>
                <tr>
                <td>Elmah</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.Elmah/" target="_blank"> Install - Package JSNLog.Elmah</a></td>
    </tr>
                <tr>
                <td>Serilog</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.Serilog/" target="_blank"> Install - Package JSNLog.Serilog</a></td>
    </tr>
                <tr>
                <td>Common.Logging</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.CommonLogging/" target="_blank"> Install - Package & nbsp;JSNLog.CommonLogging</a></td>
    </tr>
</table>

<p>
    If your logging package is not listed here, install the version for Common.Logging and
    then install a Common.Logging
                <a href="http://www.nuget.org/packages?q=Common.Logging"> adapter for your logging package</a>.
</p>

@*
    ---------------------------------------------------------
    The hash "addtoyourpages" is used in the Nuget readme file
    ---------------------------------------------------------
*@

                <a name="addtoyourpages"></a>
            <h2>2.Load jsnlog.js on your pages</h2>

            @Html.Partial("_LoadFromCDNInstallationStep")

@*
    ---------------------------------------------------------
    The hash "serilog" is used in the Nuget readme file for the Nuget package for Serilog
    ---------------------------------------------------------
*@
                <a name="serilog"></a>
                <h2>3. Serilog only</h2>

                <a data-toggle="collapse" href="#collapseSerilog" aria-expanded="false" aria-controls="collapseSerilog">Click here if you use Serilog</a>
                <div class="collapse" id="collapseSerilog">

                <p style="margin-top: 10px;">
                    This package assumes that you have created a
                <a href="https://github.com/serilog/serilog/wiki/Getting-Started" target="_blank"> global logger</a>.
                     For example:
                </p>
<pre>
var log = new LoggerConfiguration()
    .WriteTo.File("log.txt")
    .CreateLogger();<br />

    // Set global logger, so JSNLog can access it.
    Log.Logger = log;
</pre>
                <p>
                    A good place for this would be the<span class="term">Application_Start</span>
                   handler in your<span class="term">Global.asax.cs</span>.
                    </p>
            </div>

                <h2>4. OWIN only</h2>

                <a data-toggle="collapse" href="#collapseOwin" aria-expanded="false" aria-controls="collapseOwin">Click here if you use OWIN</a>
                <div class="collapse" id="collapseOwin">

                <p style="margin-top: 10px;">
                    A working demo is in project
                    <a href="@SiteConstants.DemoGithubUrl" target="_blank">JSNLogDemo_Log4Net_OWIN</a>
                </p>
                <ol>
                <li>
                <a id="owin-addtopipeline"></a>
                        <b> Add JSNLog to your OWIN pipeline</b> in your Startup class:
                           <p />
                        <pre style="margin-bottom: 10px;"><span class="addedcode">using JSNLog;</span><br />

public class Startup
        {
            public void Configuration(IAppBuilder app)
            {
                ...

        // Short circuits log requests from the jsnlog.js client library and
        // passes the log data on to the server side logging package.
                        <span class="addedcode">app.UseJSNLog();</span>
        ...
    }
    }</pre>
                    </li>
                    <li>
                        <b>Update your web.config</b> -
                        Remove the definitions that make JSNLog work as an HTTP Handler, and add a definition
                        that sends
                        all log requests to the OWIN handler:
                        <p />
                        <pre>&lt;configuration&gt;
    &lt;system.web&gt;
    &lt;httpHandlers&gt;
        ...
        &lt;!-- Remove this line --&gt;
                <del>&lt;add verb = "*" path= "*@SiteConstants.HandlerExtension" type= "JSNLog.LoggerHandler, JSNLog" / &gt;</del>
    &lt;/httpHandlers&gt;
    &lt;/system.web&gt;
    &lt;system.webServer&gt;
    &lt;handlers&gt;
        ...
        &lt;!-- Remove these lines --&gt;
                <del>&lt;add name = "LoggerHandler" verb= "*" path= "*@SiteConstants.HandlerExtension" type= "JSNLog.LoggerHandler, JSNLog" resourceType= "Unspecified" preCondition= "integratedMode" / &gt;</del>
                <del>&lt;add name = "LoggerHandler-Classic" path= "*@SiteConstants.HandlerExtension" verb= "*" modules= "IsapiModule" scriptProcessor= "%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" resourceType= "Unspecified" preCondition= "classicMode" / &gt;</del>
        &lt;!--
        Add this line.
        If you configure JSNLog to send log request to a url that
        does NOT end in @SiteConstants.HandlerExtension (@Html.ViewLink("getstarted-cors", "how")), change the path attribute below.
        --&gt;
                <span class="addedcode">&lt;add name = "Owin" verb="" path="*@SiteConstants.HandlerExtension"
             type="Microsoft.Owin.Host.SystemWeb.OwinHttpHandler, Microsoft.Owin.Host.SystemWeb"/&gt;</span>
    &lt;/handlers&gt;
    &lt;/system.webServer&gt;
&lt;/configuration&gt;</pre>
                <p />
            </li>
            <li>
                <b>Add package</b> -
                If you haven't already done so, add the <span class="term">Microsoft.Owin.Host.SystemWeb</span> package:
                <pre>Install-Package Microsoft.Owin.Host.SystemWeb</pre>
                <p />
            </li>
            </ol>
            </div>

            <a name="obfuscatedscripterror">
                </a>
                <h2>5. Prevent script error obfuscation</h2>
                @Html.Partial("_ObfuscatedScriptError")

                <p>
                    <h2>
                        6. @Html.ViewLink("getstartedlogging", "Start logging >>")
                    </h2>
                </p>
                }
}

            @*====================================================================================================*@
            @* JS Only *@
            @*====================================================================================================*@

@if (currentVersion == "JsOnly")
{
    <p>
        @{
            string netJsUrl = PageVersions.UrlWithVersionUrlName("netjs");
        }

        <small>If you use .Net, <a href="@netJsUrl">click here</a>.</small>
    </p>

    <h2>1. Add script tag</h2>

    <p>
        You can load JSNLog from a CDN:
    </p>
    <pre>@SiteConstants.CdnJsScriptTag</pre>

    <h2>2. Create end point on your server</h2>

    <p>
        You will need to create a server side end point to receive log messages from jsnlog.js and somehow
        store them (@Html.ViewLink("getstarted-logmessageformat", "details")).
    </p>

    <h2>3. Prevent script error obfuscation</h2>
    @Html.Partial("_ObfuscatedScriptError")


}

@*====================================================================================================*@
@* NodeJs *@
@*====================================================================================================*@

@if (currentVersion == "NodeJs")
{
    <p>
        <a href="https://github.com/mperdeck/jsnlog.NodeJsWorkingDemos" target="_blank">Working sample code</a>
    </p>

    <h2>Logging server side</h2>
    <ol>
        <li>
            Install jsnlog.js from NPM:
            <pre>npm install jsnlog</pre>
        </li>
        <li>
            Load jsnlog into your code (@Html.ViewLink("getstarted-loadingjsfile-nodejs", "alternatives")):
            <pre>var JL = require('jsnlog').JL;</pre>
        </li>
        <li>
            By default, jsnlog.js logs to the console. To make it easy to log to a database or a logging service,
            you can use
            <a href="https://github.com/flatiron/winston#working-with-transports" target="_blank">Winston transports</a>
            as well
            (@Html.ViewLink("getstarted-loggingtodb", "see how")).
        </li>
    </ol>

    <p>
        If you will only be logging from a Node.js program, that's the installation done.
        Head on to the @Html.ViewLink("getstartedlogging")
        page.
    </p>
    <p>
        If you have a web site, you'll want to log exceptions and other interesting events in the client
        and store the log messages on the server. Continue on.
    </p>

    <h2>Logging client side</h2>

    <ol>
        <li>
            <a href="#load">Load jsnlog.js on the client</a>
        </li>
        <li>
            <a href="#receive">Receive and store log messages on the server</a>
        </li>
        <li>
            <a href="#obfuscation">Prevent script error obfuscation</a>
        </li>
    </ol>

    <a id="load"></a>
    <h3>1. Load jsnlog.js on the client</h3>
    <p>
        @Html.ViewLink("getstarted-loadingjsfile-nodejs", "Options to load jsnlog.js onto your pages").
    </p>
    <p>
        Note that the same jsnlog.min.js file happily works on both the client and server.
        On the client, by default it automatically sends log messages via AJAX to the server.
        On the server, by default it sends log messages to the console.
    </p>

    <a id="receive"></a>
    <h3>2. Receive and store log messages on the server</h3>
    <p>
        The jsnlog.js running on the client by default sends log messages to:
    </p>
    <pre>@SiteConstants.DefaultDefaultAjaxUrl</pre>

    <p>
        (@Html.ViewLink("jsnlogjs-jl-setOptions", "how to change", fragment: "defaultAjaxUrl"))
    </p>
    <p>
        These log messages are POSTs, and the log messages sit in the body as
        a JSON object. You will want to receive those messages on the server, and pass them on to
        the server side jsnlog.js, for server side logging.
    </p>

    <p>
        To make this easier, the <span class="term">jsnlog-nodejs</span> package
        exposes a function that takes the JSON object and logs all the messages:
    </p>

    <pre>npm install jsnlog-nodejs</pre>

    <pre>var JL = require('jsnlog').JL;
var jsnlog_nodejs = require('jsnlog-nodejs').jsnlog_nodejs;<br />
// Read JSON object from message body
var jsonBody = ....;<br />
// Pass the log messages to the server side jsnlog.js
jsnlog_nodejs(JL, jsonBody);
</pre>
    <p>
        For example, if you use
        <a href="https://expressjs.com/" target="_blank">Express</a>, you could
        add a route to receive the log messages:
    </p>
    <pre>npm install express
npm install body-parser
</pre>

    <pre>
var express = require('express');
var bodyParser = require('body-parser'); 
var app = express();<br />
// Ensure that the JSON objects received from the client get parsed correctly.
app.use(bodyParser.json())<br />
// jsnlog.js on the client by default sends log messages to @SiteConstants.DefaultDefaultAjaxUrl, using POST.
app.post('*.logger', function (req, res) { 
    jsnlog_nodejs(JL, req.body);<br />
    // Send empty response. This is ok, because client side jsnlog does not use response from server.
    res.send(''); 
});
</pre>

    <p>
        Now that the installation is done,
        visit the @Html.ViewLink("getstartedlogging")
        page.
    </p>

    <a id="obfuscation"></a>
    <h3>3. Prevent script error obfuscation</h3>
    @Html.Partial("_ObfuscatedScriptError")
}
