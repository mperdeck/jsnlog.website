@using ViewExtensions
@using WebSite.App_Code

@{
    ViewBag.Title = "Installation";
    ViewBag.Key = "downloadinstall";
    ViewBag.Description = "How to download and install JSNLog.";
    ViewBag.Order = "100";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";

    string currentVersion = PageVersions.CurrentVersion();
}

@if (currentVersion == "NetJs")
{
    <p>
        Select the version you are using:
    </p>
    <ul class="large-items">
        <li>
            @Html.ViewLink("downloadinstall-aspnetcore", "ASP.NET Core")
        </li>
        <li>
            @Html.ViewLink("downloadinstall-aspnetframework", "ASP.NET Framework")
            <br/>
            <small>(The ASP.NET version before ASP.NET Core)</small>
        </li>
    </ul>
}

@*====================================================================================================*@
@* JS Only *@
@*====================================================================================================*@

@if (currentVersion == "JsOnly")
{
    <p>
        @{
            string netJsUrl = PageVersions.UrlWithVersionUrlName("netjs");
        }

        <small>If you use .Net, <a href="@netJsUrl">click here</a>.</small>
    </p>

    <h2>1. Add script tag</h2>

    <p>
        You can load JSNLog from a CDN:
    </p>
    <pre>@SiteConstants.CdnJsScriptTag</pre>

    <h2>2. Create end point on your server</h2>

    <p>
        You will need to create a server side end point to receive log messages from jsnlog.js and somehow
        store them (@Html.ViewLink("getstarted-logmessageformat", "details")).
    </p>

    <h2>3. Prevent script error obfuscation</h2>
    @Html.Partial("_ObfuscatedScriptError")


}

@*====================================================================================================*@
@* NodeJs *@
@*====================================================================================================*@

@if (currentVersion == "NodeJs")
{
    <p>
        <a href="https://github.com/mperdeck/jsnlog.NodeJsWorkingDemos" target="_blank">Working sample code</a>
    </p>

    <h2>Logging server side</h2>
    <ol>
        <li>
            Install jsnlog.js from NPM:
            <pre>npm install jsnlog</pre>
        </li>
        <li>
            Load jsnlog into your code (@Html.ViewLink("getstarted-loadingjsfile-nodejs", "alternatives")):
            <pre>var JL = require('jsnlog').JL;</pre>
        </li>
        <li>
            By default, jsnlog.js logs to the console. To make it easy to log to a database or a logging service,
            you can use
            <a href="https://github.com/flatiron/winston#working-with-transports" target="_blank">Winston transports</a>
            as well
            (@Html.ViewLink("getstarted-loggingtodb", "see how")).
        </li>
    </ol>

    <p>
        If you will only be logging from a Node.js program, that's the installation done.
        Head on to the @Html.ViewLink("getstartedlogging")
        page.
    </p>
    <p>
        If you have a web site, you'll want to log exceptions and other interesting events in the client
        and store the log messages on the server. Continue on.
    </p>

    <h2>Logging client side</h2>

    <ol>
        <li>
            <a href="#load">Load jsnlog.js on the client</a>
        </li>
        <li>
            <a href="#receive">Receive and store log messages on the server</a>
        </li>
        <li>
            <a href="#obfuscation">Prevent script error obfuscation</a>
        </li>
    </ol>

    <a id="load"></a>
    <h3>1. Load jsnlog.js on the client</h3>
    <p>
        @Html.ViewLink("getstarted-loadingjsfile-nodejs", "Options to load jsnlog.js onto your pages").
    </p>
    <p>
        Note that the same jsnlog.min.js file happily works on both the client and server.
        On the client, by default it automatically sends log messages via AJAX to the server.
        On the server, by default it sends log messages to the console.
    </p>

    <a id="receive"></a>
    <h3>2. Receive and store log messages on the server</h3>
    <p>
        The jsnlog.js running on the client by default sends log messages to:
    </p>
    <pre>@SiteConstants.DefaultDefaultAjaxUrl</pre>

    <p>
        (@Html.ViewLink("jsnlogjs-jl-setOptions", "how to change", fragment: "defaultAjaxUrl"))
    </p>
    <p>
        These log messages are POSTs, and the log messages sit in the body as
        a JSON object. You will want to receive those messages on the server, and pass them on to
        the server side jsnlog.js, for server side logging.
    </p>

    <p>
        To make this easier, the <span class="term">jsnlog-nodejs</span> package
        exposes a function that takes the JSON object and logs all the messages:
    </p>

    <pre>npm install jsnlog-nodejs</pre>

    <pre>var JL = require('jsnlog').JL;
var jsnlog_nodejs = require('jsnlog-nodejs').jsnlog_nodejs;<br />
// Read JSON object from message body
var jsonBody = ....;<br />
// Pass the log messages to the server side jsnlog.js
jsnlog_nodejs(JL, jsonBody);
</pre>
    <p>
        For example, if you use
        <a href="https://expressjs.com/" target="_blank">Express</a>, you could
        add a route to receive the log messages:
    </p>
    <pre>npm install express
npm install body-parser
</pre>

    <pre>
var express = require('express');
var bodyParser = require('body-parser'); 
var app = express();<br />
// Ensure that the JSON objects received from the client get parsed correctly.
app.use(bodyParser.json())<br />
// jsnlog.js on the client by default sends log messages to @SiteConstants.DefaultDefaultAjaxUrl, using POST.
app.post('*.logger', function (req, res) { 
    jsnlog_nodejs(JL, req.body);<br />
    // Send empty response. This is ok, because client side jsnlog does not use response from server.
    res.send(''); 
});
</pre>

    <p>
        Now that the installation is done,
        visit the @Html.ViewLink("getstartedlogging")
        page.
    </p>

    <a id="obfuscation"></a>
    <h3>3. Prevent script error obfuscation</h3>
    @Html.Partial("_ObfuscatedScriptError")
}
