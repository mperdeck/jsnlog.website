@using ViewExtensions
@using WebSite.App_Code

@{
    ViewBag.Title = "Installation";
    ViewBag.Key = "downloadinstall";
    ViewBag.Description = "How to download and install JSNLog.";
    ViewBag.Order = "100";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";

    string currentVersion = PageVersions.CurrentVersion();
}

@if (currentVersion == "NetJs")
{
    bool isNetCore;
    bool isNetFramework;
    PageVersions.GetPageVersion(out isNetCore, out isNetFramework);

    if (isNetCore)
    {
        <p>
            Shows how to implement JavaScript logging in your ASP.NET Core web site.
        </p>
        <ul>
            <li>
                @* Logging objects using Serilog doesn't work in Release mode (but it does work in Debug mode!) in netstandard1.6. This problem goes away in .Net Core 2. *@
                JSNLog works with both .NETStandard 2.0 or better, and .Net 4.5.2 or better.
            </li>
            <li>
                ASP.NET Core demo:
                <a href="@SiteConstants.DemoAspNetCoreGithubUrl" target="_blank">JSNLogDemo_Core_NetCoreApp2</a>
            </li>
        </ul>


        <h2>1. Install server side component</h2>
        <p>
            If you haven't already done so, install the JSNLog NuGet package in your web application:
        </p>
        @Html.Partial("_InstallPackageCore")
        <p />

        <h2>2. Load jsnlog.js on your pages</h2>

        @Html.Partial("_LoadFromCDNInstallationStep")

        <a id="startup"></a>
        <h2>3. Configure JSNLog middleware in Startup class</h2>
        <p>
            In the <span class="term">Configure</span> method in your
            <span class="term">Startup</span> class,
            add the JSNLog middleware before the <span class="term">UseStaticFiles</span> middleware.
        </p>
        <p>
            This short circuits logging requests from the jsnlog.js client side library
            and hands the log data off to your server side loggers.
        </p>

        @Html.Partial("_AddUseJsnlogToCorePipeline")
        <p />

        <h2>4. @Html.ViewLink("getstartedlogging", "Start logging >>")</h2>
    }

    if (isNetFramework)
    {
        <a name="additional"></a>
        <h2>1. Install adapter for your logging package</h2>

        <p>
            JSNLog needs an adapter to work with your specific logging package (Serilog, NLog, Log4Net, etc.)
        </p>
        <p>
            Install one of the packages below to add the correct adapter to your web application.
            This also installs JSNLog itself if you haven't already done so.
        </p>

        <p>
            <a data-toggle="collapse" href="#collapseVS2013" aria-expanded="false" aria-controls="collapseVS2013">Click here if you use Visual Studio 2013 or older</a>
        </p>
        <div class="collapse" id="collapseVS2013">
            <p>
                These packages contain dependencies for both ASP.NET Framework and ASP.NET Core.
                However, versions below 2.8.60318.667 of the NuGet Package Manager installed in Visual Studio do not support this.
            </p>
            <p>
                To check your Nuget version and upgrade if needed:
            </p>
            <ol>
                <li>
                    In Visual Studio, open <span class="term">Tools</span> | <span class="term">Extensions and Updates...</span>;
                </li>
                <li>
                    Click <span class="term">Updates</span> (in left hand menu);
                </li>
                <li>
                    If an update of NuGet Package Manager is available, click <span class="term">Update</span>.
                </li>
            </ol>
        </div>

        <table class="table">
            <tr>
                <th>If you use</th>
                <th>Install this package</th>
            </tr>
            <tr>
                <td>Log4Net</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.Log4Net/" target="_blank">Install-Package JSNLog.Log4Net</a></td>
            </tr>
            <tr>
                <td>NLog</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.NLog/" target="_blank">Install-Package JSNLog.NLog</a></td>
            </tr>
            <tr>
                <td>Elmah</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.Elmah/" target="_blank">Install-Package JSNLog.Elmah</a></td>
            </tr>
            <tr>
                <td>Serilog</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.Serilog/" target="_blank">Install-Package JSNLog.Serilog</a></td>
            </tr>
            <tr>
                <td>Common.Logging</td>
                <td><a href="https://www.nuget.org/packages/JSNLog.CommonLogging/" target="_blank">Install-Package&nbsp;JSNLog.CommonLogging</a></td>
            </tr>
        </table>

        <p>
            If your logging package is not listed here, install the version for Common.Logging and
            then install a Common.Logging
            <a href="http://www.nuget.org/packages?q=Common.Logging">adapter for your logging package</a>.
        </p>

        @*
            ---------------------------------------------------------
            The hash "addtoyourpages" is used in the Nuget readme file
            ---------------------------------------------------------
        *@

        <a name="addtoyourpages"></a>
        <h2>2. Load jsnlog.js on your pages</h2>

        @Html.Partial("_LoadFromCDNInstallationStep")

        @*
            ---------------------------------------------------------
            The hash "serilog" is used in the Nuget readme file for the Nuget package for Serilog
            ---------------------------------------------------------
        *@
        <a name="serilog"></a>
        <h2>3. Serilog only</h2>

        <a data-toggle="collapse" href="#collapseSerilog" aria-expanded="false" aria-controls="collapseSerilog">Click here if you use Serilog</a>
        <div class="collapse" id="collapseSerilog">

            <p style="margin-top: 10px;">
                This package assumes that you have created a
                <a href="https://github.com/serilog/serilog/wiki/Getting-Started" target="_blank">global logger</a>.
                For example:
            </p>
<pre>
var log = new LoggerConfiguration()
    .WriteTo.File("log.txt")
    .CreateLogger();<br />

    // Set global logger, so JSNLog can access it.
    Log.Logger = log;
</pre>
            <p>
                A good place for this would be the <span class="term">Application_Start</span>
                handler in your <span class="term">Global.asax.cs</span>.
            </p>
        </div>

        <h2>4. OWIN only</h2>

        <a data-toggle="collapse" href="#collapseOwin" aria-expanded="false" aria-controls="collapseOwin">Click here if you use OWIN</a>
        <div class="collapse" id="collapseOwin">

            <p style="margin-top: 10px;">
                A working demo is in project
                <a href="@SiteConstants.DemoGithubUrl" target="_blank">JSNLogDemo_Log4Net_OWIN</a>
            </p>
            <ol>
                <li>
                    <a id="owin-addtopipeline"></a>
                    <b>Add JSNLog to your OWIN pipeline</b> in your Startup class:
                    <p />
                    <pre style="margin-bottom: 10px;"><span class="addedcode">using JSNLog;</span><br />

public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        ...

        // Short circuits log requests from the jsnlog.js client library and 
        // passes the log data on to the server side logging package.
                    <span class="addedcode">app.UseJSNLog();</span>
        ...
    }
}</pre>
                </li>
                <li>
                    <b>Update your web.config</b> -
                    Remove the definitions that make JSNLog work as an HTTP Handler, and add a definition
                    that sends
                    all log requests to the OWIN handler:
                    <p />
                    <pre>&lt;configuration&gt;
    &lt;system.web&gt;
    &lt;httpHandlers&gt;
        ...
        &lt;!-- Remove this line --&gt;
                    <del>&lt;add verb="*" path="*@SiteConstants.HandlerExtension" type="JSNLog.LoggerHandler, JSNLog" /&gt;</del>
    &lt;/httpHandlers&gt;
    &lt;/system.web&gt;
    &lt;system.webServer&gt;
    &lt;handlers&gt;
        ...
        &lt;!-- Remove these lines --&gt;
                    <del>&lt;add name="LoggerHandler" verb="*" path="*@SiteConstants.HandlerExtension" type="JSNLog.LoggerHandler, JSNLog" resourceType="Unspecified" preCondition="integratedMode" /&gt;</del>
                    <del>&lt;add name="LoggerHandler-Classic" path="*@SiteConstants.HandlerExtension" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode" /&gt;</del>
        &lt;!-- 
        Add this line. 
        If you configure JSNLog to send log request to a url that 
        does NOT end in @SiteConstants.HandlerExtension (@Html.ViewLink("getstarted-cors", "how")), change the path attribute below.
        --&gt;
                    <span class="addedcode">&lt;add name="Owin" verb="" path="*@SiteConstants.HandlerExtension" 
             type="Microsoft.Owin.Host.SystemWeb.OwinHttpHandler, Microsoft.Owin.Host.SystemWeb"/&gt;</span>
    &lt;/handlers&gt;
    &lt;/system.webServer&gt;
&lt;/configuration&gt;</pre>
                    <p />
                </li>
                <li>
                    <b>Add package</b> -
                    If you haven't already done so, add the <span class="term">Microsoft.Owin.Host.SystemWeb</span> package:
                    <pre>Install-Package Microsoft.Owin.Host.SystemWeb</pre>
                    <p />
                </li>
            </ol>
        </div>

        <a name="obfuscatedscripterror"></a>
        <h2>5. Prevent script error obfuscation</h2>
        @Html.Partial("_ObfuscatedScriptError")

        <p>
            <h2>
                6. @Html.ViewLink("getstartedlogging", "Start logging >>")
            </h2>
        </p>
    }
}

@*====================================================================================================*@
@* JS Only *@
@*====================================================================================================*@

@if (currentVersion == "JsOnly")
{
    <p>
        @{
            string netJsUrl = PageVersions.UrlWithVersionUrlName("netjs");
        }

        <small>If you use .Net, <a href="@netJsUrl">click here</a>.</small>
    </p>

    <h2>1. Add script tag</h2>

    <p>
        You can load JSNLog from a CDN:
    </p>
    <pre>@SiteConstants.CdnJsScriptTag</pre>

    <h2>2. Create end point on your server</h2>

    <p>
        You will need to create a server side end point to receive log messages from jsnlog.js and somehow
        store them (@Html.ViewLink("getstarted-logmessageformat", "details")).
    </p>

    <h2>3. Prevent script error obfuscation</h2>
    @Html.Partial("_ObfuscatedScriptError")


}

@*====================================================================================================*@
@* NodeJs *@
@*====================================================================================================*@

@if (currentVersion == "NodeJs")
{
    <p>
        <a href="https://github.com/mperdeck/jsnlog.NodeJsWorkingDemos" target="_blank">Working sample code</a>
    </p>

    <h2>Logging server side</h2>
    <ol>
        <li>
            Install jsnlog.js from NPM:
            <pre>npm install jsnlog</pre>
        </li>
        <li>
            Load jsnlog into your code (@Html.ViewLink("getstarted-loadingjsfile-nodejs", "alternatives")):
            <pre>var JL = require('jsnlog').JL;</pre>
        </li>
        <li>
            By default, jsnlog.js logs to the console. To make it easy to log to a database or a logging service,
            you can use
            <a href="https://github.com/flatiron/winston#working-with-transports" target="_blank">Winston transports</a>
            as well
            (@Html.ViewLink("getstarted-loggingtodb", "see how")).
        </li>
    </ol>

    <p>
        If you will only be logging from a Node.js program, that's the installation done.
        Head on to the @Html.ViewLink("getstartedlogging")
        page.
    </p>
    <p>
        If you have a web site, you'll want to log exceptions and other interesting events in the client
        and store the log messages on the server. Continue on.
    </p>

    <h2>Logging client side</h2>

    <ol>
        <li>
            <a href="#load">Load jsnlog.js on the client</a>
        </li>
        <li>
            <a href="#receive">Receive and store log messages on the server</a>
        </li>
        <li>
            <a href="#obfuscation">Prevent script error obfuscation</a>
        </li>
    </ol>

    <a id="load"></a>
    <h3>1. Load jsnlog.js on the client</h3>
    <p>
        @Html.ViewLink("getstarted-loadingjsfile-nodejs", "Options to load jsnlog.js onto your pages").
    </p>
    <p>
        Note that the same jsnlog.min.js file happily works on both the client and server.
        On the client, by default it automatically sends log messages via AJAX to the server.
        On the server, by default it sends log messages to the console.
    </p>

    <a id="receive"></a>
    <h3>2. Receive and store log messages on the server</h3>
    <p>
        The jsnlog.js running on the client by default sends log messages to:
    </p>
    <pre>@SiteConstants.DefaultDefaultAjaxUrl</pre>

    <p>
        (@Html.ViewLink("jsnlogjs-jl-setOptions", "how to change", fragment: "defaultAjaxUrl"))
    </p>
    <p>
        These log messages are POSTs, and the log messages sit in the body as
        a JSON object. You will want to receive those messages on the server, and pass them on to
        the server side jsnlog.js, for server side logging.
    </p>

    <p>
        To make this easier, the <span class="term">jsnlog-nodejs</span> package
        exposes a function that takes the JSON object and logs all the messages:
    </p>

    <pre>npm install jsnlog-nodejs</pre>

    <pre>var JL = require('jsnlog').JL;
var jsnlog_nodejs = require('jsnlog-nodejs').jsnlog_nodejs;<br />
// Read JSON object from message body
var jsonBody = ....;<br />
// Pass the log messages to the server side jsnlog.js
jsnlog_nodejs(JL, jsonBody);
</pre>
    <p>
        For example, if you use
        <a href="https://expressjs.com/" target="_blank">Express</a>, you could
        add a route to receive the log messages:
    </p>
    <pre>npm install express
npm install body-parser
</pre>

    <pre>
var express = require('express');
var bodyParser = require('body-parser'); 
var app = express();<br />
// Ensure that the JSON objects received from the client get parsed correctly.
app.use(bodyParser.json())<br />
// jsnlog.js on the client by default sends log messages to @SiteConstants.DefaultDefaultAjaxUrl, using POST.
app.post('*.logger', function (req, res) { 
    jsnlog_nodejs(JL, req.body);<br />
    // Send empty response. This is ok, because client side jsnlog does not use response from server.
    res.send(''); 
});
</pre>

    <p>
        Now that the installation is done,
        visit the @Html.ViewLink("getstartedlogging")
        page.
    </p>

    <a id="obfuscation"></a>
    <h3>3. Prevent script error obfuscation</h3>
    @Html.Partial("_ObfuscatedScriptError")
}
