@using WebSite.App_Code
@using ViewExtensions

@{
    ViewBag.Title = "JavaScript Logging for ASP.NET Core";
    ViewBag.H1 = "JavaScript Logging for ASP.NET Core";
    ViewBag.Key = "downloadinstall-aspnetcore";
    ViewBag.Description = "Installation for ASP.NET Core";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

<p>
    Shows how to implement JavaScript logging in your ASP.NET Core web site.
</p>
<ul>
    <li>
        @* Logging objects using Serilog doesn't work in Release mode (but it does work in Debug mode!) in netstandard1.6. This problem goes away in .Net Core 2. *@
        JSNLog.AspNetCore requires .NETStandard 2.0 or better (if you use classic ASP.NET, @Html.ViewLink("downloadinstall", "install JSNLog") which requires .Net 4.5.2 or up).
    </li>
    <li>
        ASP.NET Core demo:
        <a href="@SiteConstants.DemoGithubUrl" target="_blank">JSNLogDemo_Core_NetCoreApp2</a>
    </li>
</ul>


<h2>1. Install server side component</h2>
<p>
    Install JSNLog NuGet package for ASP.NET Core:
</p>
<pre>Install-Package JSNLog.AspNetCore</pre>
<p />

<h2>2. Load jsnlog.js on your pages</h2>
<p>
    Include a script tag in your ASP.NET Core web site, such as this
    (@Html.ViewLink("getstarted-loadingjsfile", "more options")):
</p>
<pre>@@*Add to _Layout.cshtml*@@

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jsnlog/@Generated.Version/jsnlog.min.js&quot;&gt;&lt;/script&gt;</pre>
<p>

</p>
Your <span class="term">_Layout.cshtml</span> file
            would be a great place for this.
<p />

<a id="startup"></a>
<h2>3. Configure JSNLog middleware in Startup.cs</h2>
<p>
    In your
    <span class="term">Startup.cs</span> file,
    add the JSNLog middleware to your ASP.NET Core application before the <span class="term">UseStaticFiles</span> middleware.
</p>
<p>
    This short circuits logging requests from the jsnlog.js client side library
    and hands the log data off to your server side loggers.
</p>

@Html.Partial("_AddUseJsnlogToCorePipeline")
<p />

<a id="taghelper"></a>
<h2>4. Optional: Configure client side loggers with server side code</h2>
<p>
    You can configure your client side loggers in your server side code, by
    initializing a
    <span class="term">JsnlogConfiguration</span> object
    (@Html.ViewLink("webconfig-jsnlog", "how"))
    and
    passing
    it
    to the <span class="term">UseJSNLog</span> method as shown in the listing above.
    This way you can use the
    <a href="https://docs.asp.net/en/latest/fundamentals/configuration.html" target="_blank">ASP.NET Core Configuration</a>
    features, which are pretty cool.
</p>
@Html.Partial("_CallingJlJavascriptLoggerDefinitions")

<p>
    Note that this is purely optional. JSNLog works fine out of the box without configuration.
    You can also
    @Html.ViewLink("jsnlogjs-logger-setOptions", "configure your loggers in your JavaScript")<text>.</text>
</p>

<h2>5. @Html.ViewLink("getstartedlogging", "Start logging >>")</h2>


