@using WebSite.App_Code
@using ViewExtensions

@{
    ViewBag.Title = "For ASP.NET Core";
    ViewBag.H1 = "JavaScript Logging for ASP.NET Core";
    ViewBag.Key = "downloadinstall-aspnetcore";
    ViewBag.Description = "Installation for ASP.NET Core";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

<p>
    Shows how to implement JavaScript logging in your ASP.NET Core web site.
</p>
<ul>
    <li>
        @* Logging objects using Serilog doesn't work in Release mode (but it does work in Debug mode!) in netstandard1.6. This problem goes away in .Net Core 2. *@
        JSNLog works with both .NETStandard 2.0 or better, and .Net 4.5.2 or better.
    </li>
    <li>
        ASP.NET Core demo:
        <a href="@SiteConstants.DemoAspNetCoreGithubUrl" target="_blank">JSNLogDemo_Core_NetCoreApp2</a>
    </li>
</ul>


<h2>1. Install server side component</h2>
<p>
    If you haven't already done so, install the JSNLog NuGet package in your web application:
</p>
<pre>Install-Package JSNLog</pre>
<p />

<h2>2. Load jsnlog.js on your pages</h2>

@Html.Partial("_LoadFromCDNInstallationStep")

<a id="startup"></a>
<h2>3. Configure JSNLog middleware in Startup class</h2>
<p>
    In the <span class="term">Configure</span> method in your
    <span class="term">Startup</span> class,
    add the JSNLog middleware before the <span class="term">UseStaticFiles</span> middleware.
</p>
<p>
    This short circuits logging requests from the jsnlog.js client side library
    and hands the log data off to your server side loggers.
</p>

@Html.Partial("_AddUseJsnlogToCorePipeline")
<p />

<h2>4. @Html.ViewLink("getstartedlogging", "Start logging >>")</h2>

@section DocumentScripts {
    <script>
        netSelector.setFrameworkCookie('net-core');
    </script>
}


