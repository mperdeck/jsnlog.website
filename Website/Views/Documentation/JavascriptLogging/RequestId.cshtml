@using ViewExtensions

@{
    ViewBag.Title = "RequestId Method";
    ViewBag.Key = "javascriptlogging-requestid";
    ViewBag.Description = "Returns the current request id.";
    ViewBag.VersionNameRegex = "NetJs";
}

@{
    bool isNetCore;
    bool isNetFramework;
    PageVersions.GetPageVersion(out isNetCore, out isNetFramework);
}

@section Definition {
<pre>// For ASP.NET Framework
public static string RequestId()
    
// For ASP.NET Core    
public static string RequestId(this HttpContext httpContext)</pre>

    <section class="parameters">
        <h3>Return Value</h3>
        <p>
            A string identifying the current request.
        </p>
    </section>
}


@section Remarks {

    <p>
        This method returns the request id of the current request (<a href="#details">details</a>).
        Including this string in your server side log entries allows you to track which log entries belong to the same request
        (@Html.ViewLink("getstarted-requestids", "how")).
    </p>
    <p>
        Each time you call this method within the same request, you will get the same string.
    </p>
    <p>
        Note that if you call the
        @if (isNetFramework)
        {
            <span class="net-framework-only">
                @Html.ViewLink("javascriptlogging-configure", "Configure")
                HTML helper
            </span>
        }

        <span class="net-core-only">
            @Html.ViewLink("jl-javascript-logger-definitions-taghelper", "jl-javascript-logger-definitions")
            tag helper
        </span>

        with your own request id, that doesn't mean the <span class="term">RequestId</span> method from that point on returns your request id.
        <span class="term">RequestId</span>
        always returns the same request id.
    </p>


    <a id="details"></a>
    <h3>How the request id is found</h3>
    <p>
        This method first checks whether the current request is a log request from the jsnlog.js library.
        If it is, it returns the request id contained in the log request.
        This way, the request ids in the client side log requests match the request id of the original request to the server
        that loaded the page that is now sending those log requests.
    </p>
    <p>
        If it is not a log request,
        this method comes up with a unique id for the current request.
    </p>

    @if (isNetFramework)
    {
        <p class="net-framework-only">
            If you have
            <a href="http://www.iis.net/configreference/system.webserver/httptracing" target="_blank">Event Tracing for Windows (ETW)</a>
            switched on,
            JSNLog uses the same request id that is used internally by IIS.
        </p>
    }

    <p class="net-core-only">
        JSNLog looks at the <span class="term">TraceIdentifier</span>
        property of the
        HttpContext to get the request id.
    </p>
    <p>
        If the method can't get the request id with the above means, it generates a random GUID.
    </p>

}


