@{
    ViewBag.Title = "fatalException Method";
    ViewBag.Key = "jsnlogjs-logger-fatalException";
    ViewBag.Description = "Creates a log item with severity FATAL containing a message and an exception";
}




@using ViewExtensions

@section Definition {
<pre>fatalException(logObject: any, e: any): Logger</pre>

    <section class="parameters">
        <h3>Parameters</h3>

            <table class="table medium no-borders">
        <tr>
            <th>logObject</th>
            <td>
                String or object to be logged, or a function that returns the string or object to be logged
                (@Html.ViewLink("jsnlogjs-logger-log", "details", fragment: "Remarks")).
            </td>
        </tr>
        <tr>
            <th>e</th>
            <td>
                <a href="http://www.w3schools.com/js/js_errors.asp" target="_blank">Exception</a>
                 that will be logged along with the logObject. On Chrome, Firefox and IE10 and higher,
                a stack trace will be logged as well. However, see the Remarks below.
            </td>
        </tr>
    </table>

        <h3>Return Value</h3>
        <p>
            The Logger itself.
        </p>
    </section>
}

@section Remarks {
    <p>
        The fatalException function will log the stack trace of the JavaScript exception, showing where in your code the exception occurred, under these circumstances:
    </p>
    <ul>
        <li>
            The exception was thrown by the browser, such as when trying to read an undefined variable:
            <pre>try {
    // Browser throws exception
    i.dont.exist = 666;
} catch(e) {
    // Logs stack trace
    JL().fatalException("Exception was thrown!", e);
}</pre>
        </li>
        <li>
            You threw an
            <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank">Error Object</a>
            or an @Html.ViewLink("jsnlogjs-exception")<text>:</text>
            <pre>try {
    // Throwing Error object
    throw new Error("Whoops!");
} catch(e) {
    // Logs stack trace
    JL().fatalException("Exception was thrown!", e);
}</pre>
        </li>
    </ul>
    <p>
        The fatalException function will <i>not</i> log the stack trace
        if you throw something that is not an Error Object or Exception Object:
    </p>
<pre>try {
    // Throwing something that is not an Error Object or 
    // Exception Object (in this case a string)
    throw "Whoops!";
} catch(e) {
    // Does not log stack trace
    JL().fatalException("Exception was thrown!", e);
}</pre>
    <p>
        The Exception Object is built into JSNLog.
        It opens the door to much better exception handling.
        The details are
        @Html.ViewLink("jsnlogjs-exception", "here")<text>.</text>

    </p>
}

@section Examples {
    <p>
        This code catches any JavaScript exceptions and logs them.
    </p>
    <pre>try {
    ...
}
catch (e) {
    JL().fatalException("Exception was thrown!", e);
}</pre>
    <p>
        This code catches any JavaScript exceptions and logs them along with the values of some variables to make debugging easier.
    </p>
<pre>function f1(i, j) {
    try {
        ...
    }
    catch (e) {
        JL('f1').fatalException({ "i": i, "j": j}, e);
    }
}</pre>
}

