@using ViewExtensions

@{
    bool showWebConfigRelated =
        ((string)(ViewData["configSource"]) == "web.config");
}

    <h3>maxMessages</h3>
<p>
    You use <span class="term">maxMessages</span> to limit the number of messages sent to the 
       @if (showWebConfigRelated)
       {
           <text>server, per page load.</text>
       }
       else
       {
           <text>server.</text>
       }
</p>
<p>
    @if (showWebConfigRelated)
    {
        <text>When the page is loaded by the client,</text>
    }
    else
    {
        <text>When you set maxMessages via a call to setOptions,</text>
    }
    a counter is set to <span class="term">maxMessages</span>.

    Each time messages are sent to the server, that counter is decremented by the appender
    by the number of log messages sent. When the counter gets to zero or below, no more messages will be sent.
</p>

<p>
    This can lead to unexpected behaviour if:
</p>
<ul>
    <li>
        You log through multiple appenders.
    </li>
    <li>
        You buffer trace messages with the appender option
        @if (showWebConfigRelated)
        {
            @Html.ViewLink("webconfig-ajaxappender", "storeInBufferLevel")<text>.</text>
        }
        else
        {
            @Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "storeInBufferLevel")<text>.</text>
        }
    </li>
    <li>
        You use the 
        @Html.ViewLink("getstarted-logmessagebatching", "batching feature")<text>.</text>
    </li>
</ul>

<h4>Logging through multiple appenders</h4>
<p>
    As you saw, 
    the counter
    is decreased by the appender. This means that if you associate a logger with 2 appenders,
    each time that logger sends a message, 
    the counter is decreased twice (once by each appender).
</p>

<p>
    The counter
    is decreased by the appender and not by the logger, because:
</p>
<ul>
    <li>
        If you have multiple appenders sending messages to the same server,
        decreasing the counter per appender
        more accurately limits the load to your server.
    </li>
    <li>
        Only the appender knows whether
        a message will actually be sent, or if it gets stored in a buffer
        due to its
        @if (showWebConfigRelated)
        {
            @Html.ViewLink("webconfig-ajaxappender", "storeInBufferLevel")
        }
        else
        {
            @Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "storeInBufferLevel")
        }
        option.
    </li>
</ul>

<h4>Buffering trace messages</h4>
<p>
    Take a situation where <span class="term">maxMessages</span> was set to 5 and 2 messages have already been sent - 
    so the counter
    is now 3. Also, 8 trace messages are stored in the buffer.
</p>
<p>
    If a high severity message is logged causing the trace messages to be sent as well,
    1 + 8 = 9 messages will be sent. So the server has now received 2 + 9 = 11 messages. 
    After that, no more messages will be sent, because the number of messages sent (11) exceeds <span class="term">maxMessages</span> (5).
</p>

<p>
    Trace messages are allowed to go over the <span class="term">maxMessages</span> limit, because:
</p>
<ul>
    <li>
        This way you don't miss out on trace messages that may help you solve an exception in your JavaScript.
    </li>
    <li>
        The number of excess messages is limited by the size of the trace messages buffer, as set in the appender option
        @if (showWebConfigRelated)
        {
            @Html.ViewLink("webconfig-ajaxappender", "bufferSize")<text>.</text>
        }
        else
        {
            @Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "bufferSize")<text>.</text>
        }
    </li>
    <li>
        The trace messages are sent in a single log request to the server, minimizing bandwidth.
    </li>
</ul>

<h4>Using the batching feature</h4>

<p>
    Lets assume that:
</p>
<ul>
    <li>
        You set the appender option <span class="term">batchSize</span> to 5, so each log request to the server will have up to 5 log messages.
    </li>
    <li>
        You are not using a batch timeout (appender option <span class="term">batchTimeout</span>).
    </li>
    <li>
        There are 2 messages in the batch buffer, so only after 3 more have been added will the entire batch be sent.
    </li>
    <li>
        However, only 1 more message can be accepted before 
        <span class="term">maxMessages</span>
        is reached.
    </li>
</ul>
<p>
To make sure that the 2 messages already in the batch buffer are not stranded, 
    next time a log message is generated, the appender will see that this is the very last message that will be sent, and send 
    a batch with the last 2+1=3 log messages. 
</p>
<p>
    However, if you use multiple appenders, the appender dealing with the very last message won't tell the other appenders
    to flush their batch buffers, creating the potential of stranded messages. This is one 
    of the perils of using <span class="term">maxMessages</span> in conjunction with multiple appenders.
</p>


<h4>maxMessages relates to log messages, not to log requests</h4>
<p>
    If you use
    @Html.ViewLink("getstarted-logmessagebatching", "log message batching"),
    keep in mind that <span class="term">maxMessages</span>
    relates to the individual log messages going to the server, not to the number of 
    log requests to the server.
</p>



