@using ViewExtensions

@{
    ViewBag.Title = "Console log";
    ViewBag.H1 = "Replacing console log with JavaScript loggers";
    ViewBag.Key = "getstarted-loggingtoconsole";
    ViewBag.Description = "Replacing console.log with JSNLog JavaScript loggers";
    ViewBag.VersionNameRegex = "NetJs";

    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    var currentVersion = PageVersions.CurrentVersion();
}

<p>
    A popular tool during JavaScript development is
    <a href="https://developers.google.com/chrome-developer-tools/docs/console-api">console log</a>,
    which lets you send messages to
        <a href="https://developers.google.com/chrome-developer-tools/docs/console">your browser's console</a><text>.</text>
</p>
<p>
    This is quick and easy to add to your code. Problem is that your console log lines have to be managed individually.
    And when you go live, you have to modify your code to remove
    the console log lines.
</p>
<p>
    You can achieve the same benefits with JSNLog JavaScript loggers, without the drawbacks. Here is how.
</p>

<h2>Log to the console instead of to the server</h2>
<p>
    You can send log messages from your JavaScript loggers to the console instead of the server, using JSNLog's
    @Html.ViewLink("webconfig-consoleappender", "ConsoleAppender")<text>.</text>
    To make that happen, modify the debug version of your web.config:
</p>
@Html.Partial(@"Demos/_consolelog1")

<p>
    Then replace your console logs with JavaScript loggers:
</p>
<pre>
<strike>console.log('debug message');</strike>
JL().debug('debug message');
</pre>

<h2>Guaranteeing no live console loggers in live site</h2>

<p>
    To ensure your console loggers are disabled in your live site,
    make sure that the Release version of your web.config
    stops all debug messages and that it doesn't create the console appender:
</p>
@Html.Partial(@"Demos/_consolelog2")

<p>
    That way, you and your team can be sure there will be no live console loggers in your live site.
</p>

<p>
    Just in case, it is easy to maintain Debug and Release versions of your web.config using
    <a href="http://msdn.microsoft.com/en-us/library/dd465318(v=vs.100).aspx">web.config transform files</a>.
</p>

<h2>Managing logging to console</h2>
<p>
    You can use
    @Html.ViewLink("getstartedlogging", "named loggers", null, "namedloggers")
    and
    @Html.ViewLink("getstartedlogging", "logging levels", null, "logginglevels")
    to determine what gets logged to the console.
    Logging to the console is essentially the same as logging to the server - only the destination of the log messages is different.
</p>

<h2>Logging to both the console and the server</h2>

<p>
    To log to both the console and the server, create a
    @Html.ViewLink("webconfig-consoleappender", "ConsoleAppender")
    and a
    @Html.ViewLink("webconfig-ajaxappender", "AjaxAppender")<text>,</text>
    and then send all log messages to both:
</p>

@Html.Partial(@"Demos/_consolelog3")

<p>
    What about logging to the server only? Here there is no need for configuration.
    When you do not create any appenders, JSNLog uses a default AJAX appender and tells all
    JavaScript loggers to send their messages to that appender.
</p>

