@using ViewExtensions
@using JSNLog.Infrastructure

@{
    ViewBag.Title = "Lost connection handling";
    ViewBag.Key = "getstarted-handlinglostconnection";
    ViewBag.Description = "Handling losing the connection to the server.";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
}

@{
    string currentVersion = PageVersions.CurrentVersion();
}

<p>
    The browser running your JavaScript code may not always have access to the Internet. For example if somebody opened your site
    on a smartphone and they are travelling through a tunnel.
</p>
    <p>
    jsnlog.js keeps track of whether a log request to the server succeeded or failed.
    If it failed, it retains them in the batch buffer
    (which is used for
    @Html.ViewLink("getstarted-logmessagebatching", "message batching")<text>).</text>
</p>
<p>
    Meanwhile,
    if your JavaScript code keeps logging messages, they will be added to the batch buffer. So the number of messages in the buffer
    keeps growing while the server is unreachable.
</p>

<h3>maxBatchSize limits number of messages kept</h3>

    <p>
        Limit how large the buffer can grow
        by setting the appender option <span class="term">maxBatchSize</span>
        (@Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "in JavaScript")
        @if (currentVersion == "NetJs")
        { <text> or </text>@Html.ViewLink("webconfig-ajaxappender", "on the server") }<text>
            )
If the number of messages in the buffer reaches
<span class="term">maxBatchSize</span>, subsequent messages
            are discarded.
</p>
    <p>
        When the server becomes reachable again, all messages in the batch buffer are sent in one big batch.
        If any messages were discarded, an additional log message with severity <span class="term">WARN</span>
        will be sent in the same batch to let you know.
    </p>

<h3>sendTimeout sets time between retries</h3>

    <p>
    The appender option <span class="term">sendTimeout</span> is the time in milli seconds after which
    jsnlog.js gives up waiting for a response to a log request.
</p>
<p>
    After a timeout, the old log request is aborted
    and a new log request sent with all the messages in the buffer. That means that if message were added to the buffer
    while the response was outstanding, those new messages will be sent as well.
</p>
    <p>
        jsnlog.js may find out well before this timeout that no success response will be received. For example,
        it will be told immediately by the browser that the connection to the Internet is gone when it tries to send a request.
        However, in order to not put too much load on the device, jsnlog.js will wait
        <span class="term">sendTimeout</span> milli seconds anyway before sending another log request.
    </p>




