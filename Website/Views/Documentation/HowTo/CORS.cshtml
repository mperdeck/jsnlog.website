@using JSNLog.Infrastructure
@using ViewExtensions

@{
    ViewBag.Title = "Setting the url to send logs to";
    ViewBag.H1 = "Setting the url to send logs to";
    ViewBag.Key = "getstarted-cors";
    ViewBag.Description = "How to set the url where jsnlog.js sends log messages.";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
}

@{
    bool isNetCore;
    bool isNetFramework;
    bool isJs;
    PageVersions.GetPageVersion(out isNetCore, out isNetFramework, out isJs);
}

<p>
    By default, the jsnlog.js library sends all log requests to the URL
    <i>@SiteConstants.DefaultDefaultAjaxUrl</i><text>.</text>
    This page shows how to change this.
</p>

@if (!isJs)
{
    <ul>
        <li>
            <a href="#changeurl">Change the URL</a>
        </li>
        <li>
            <a href="#server-side-config">Use server side configuration to set the URL</a>
        </li>

        @if (isNetFramework)
        {
            <li>
                <a href="#check-web-config">Check web.config</a>
            </li>
        }
        <li>
            <a href="#cors">Cross domain requests</a>
        </li>
    </ul>
}

@if (!isJs)
{
    <a name="changeurl"></a>
    <h3>Change the URL</h3>
}
@if (isNetCore)
{
    <ul>
        <li>
            Working demo code:
            <a href="@SiteConstants.DemoGithubUrl" target="_blank">JSNLogDemo_Core_DefaultAjaxUrl</a>
        </li>
    </ul>
}

<p>
    An AjaxAppender goes through these steps to work out what url to send log requests to:
</p>
<ol class="large-items">
    <li>
        If has its own url, it will use that  -
        set the <i>url</i>
        @if (isJs)
        {
            <text>option of the</text>
            @Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "AjaxAppender")<text>.</text>
        }
        else
        {
            <text>
                attribute of the
            </text>
            @Html.ViewLink("webconfig-ajaxappender", "AjaxAppender")<text>.</text>
        }
        <p>
            Note that the
            @Html.ViewLink("webconfig-logger", "default appender", null, "rootlogger-and-defaultappender")
            does not have its own url, so it will always default to step 2.
        </p>
    </li>
    <li>
        If it doesn't have its own url, it will use the default Ajax url
        -
        set the <i>defaultAjaxUrl</i>
        @if (isJs)
        {
            <text>option of the</text>
            @Html.ViewLink("jsnlogjs-jl-setOptions", "global JL object")<text>.</text>
        }
        else
        {
            <text>attribute of the</text>
            @Html.ViewLink("webconfig-jsnlog")<text> configuration element.</text>
        }
    </li>
    <li>
        If you didn't set the default Ajax url, it finally falls back to
        <i>@SiteConstants.DefaultDefaultAjaxUrl</i><text>.</text>
    </li>
</ol>

@if (isJs)
{
    <p>
        If you send the log requests to a domain different from that of your site
        (such as <i>logger.mydomain.com/jsnlog.logger</i>),
        make sure the server side end point where you receive log requests
        <a href="http://www.html5rocks.com/en/tutorials/cors/" target="_blank">implements the CORS protocol</a>.
        Otherwise the browser won't send log requests to your end point.
    </p>
}

@if (!isJs)
{
    <a name="server-side-config"></a>
    <h3>Use server side configuration to set the URL</h3>

    <p>
        The previous sections suggests you use
        @Html.ViewLink("configuration-onserver", "server side configuration")
        to set the URL. This way:
    </p>
    <ul class="large-items">
        <li>At the client side, log requests will be sent to your url.</li>
        <li>
            At the server side, JSNLog will look for log requests sent to your url.
            Specifically, it will look for requests sent to:
            <p>
                <ul class="small-items">
                    <li>
                        The urls set on individual appenders; and
                    </li>
                    <li>
                        The default Ajax url, or if that is not given, <i>@SiteConstants.DefaultDefaultAjaxUrl</i>.
                    </li>
                </ul>
            </p>
        </li>
    </ul>
    <p>
        In principle, you could use
        @Html.ViewLink("configuration-onclient", "client side configuration")
        as well to set the url. However,
        at the server side, JSNLog would not know about your url, and so would not process requests to your url
        as log requests.
    </p>
}


@if (isNetFramework)
{
    <div class="net-framework-only">
        <a name="check-web-config"></a><h3>Check web.config</h3>
        <p>
            Check the
            handlers in the
            &lt;system.web&gt; and/or
            &lt;system.webServer&gt;
            sections of your web.config file.
            These contain a wildcard matching the url of log requests.
        </p>
    </div>
}

@if (!isJs)
{
    <a name="cors"></a>
    <h3>Cross domain requests</h3>

    <p>
        You may want to send your log requests to a site with a domain that is different from the site
        where they originate. For example,
        you have multiple sites with their own domains,
        and you want all log messages to go to a single common URL.
    </p>
    <p>
        By default, browsers do not allow JavaScript (such as jsnlog.js) to
        send AJAX requests to a domain different from the site domain.
    </p>
    <p>
        To make cross domain requests possible,
        JSNLog
        implements
        the <a href="http://www.w3.org/TR/cors/" target="_blank">CORS</a> protocol.
    </p>
    <p>
        For security reasons, you have to explicitly nominate
        the domains that JSNLog should accept requests from. All other domains will still be blocked.
    </p>
    <p>
        To do this,
        set the <i>corsAllowedOriginsRegex</i> attribute of the
        @Html.ViewLink("webconfig-jsnlog")
        configuration element
        to a
        <a href="http://www.regular-expressions.info/tutorial.html" target="_blank">regular expression</a>
        that matches
        all accepted domains
        (<a href="https://regex101.com/" target="_blank">test your regular expression</a>).
    </p>

    <p>
        For example, this <i>jsnlog</i> element allows requests from
        <i>my-abc-domain.com</i>,
        <i>my-xyz-domain.com</i>
        and all their sub domains, both over http and https:
    </p>
    @Html.Partial(@"Demos/_cors1")

    if (isNetFramework)
    {
        <ul>
            <li>
                Working demo code:
                <a href="@SiteConstants.DemoGithubUrl" target="_blank">JSNLogDemo_Log4Net_CORS</a>
            </li>
        </ul>
    }

    <h4>JSNLog does not support CORS on IE8/9</h4>
    <p>
        IE8 and IE9 require additional code to support CORS. Because of their
        very low market share,
        JSNLog does not support CORS on these browsers. If you use CORS, then jsnlog.js running on these browsers
        will not send log messages to the server.
    </p>
}










