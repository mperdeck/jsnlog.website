@using JSNLog.Infrastructure
@using ViewExtensions

@{
    ViewBag.Title = "Adding request headers";
    ViewBag.H1 = "Adding request headers";
    ViewBag.Key = "getstarted-addingrequestheaders";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.Description = "Adding request headers to log requests";
}

<ul>
    <li>
        Working demo code: <a href="@SiteConstants.DemoGithubUrlNetCore" target="_blank">JSNLogDemo_Core_Net7_beforeSend</a>.
    </li>
</ul>

<p>
    You may want to add request headers to the log request to the server, keep track of the success or failure of the log request, etc.
</p>
<p>
    To make that happen, assign a function to the
    <span class="term">beforeSend</span> appender option in your JavaScript code
    using the
    @Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "setOptions")
    method.
</p>

    <a id="beforeSend"></a>
    <h2>beforeSend</h2>
    <p>
        The <span class="term">beforeSend</span> option lets you set a function that is called right before
        an AJAX request with log messages is sent to the server. It receives these parameters:
    </p>
<pre>beforeSend(xhr: XMLHttpRequest, json: any)</pre>

    <table class="table medium no-borders">
        <tr>
            <th>xhr</th>
            <td>
                <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a>
                object used to send the request.
                Allows you to for example add your own request headers.
            </td>
        </tr>
        <tr>
            <th>json</th>
            <td>
                Message to be sent. Allows you to modify this message before it is sent. See below.
            </td>
        </tr>
    </table>

    <p>
        The message passed in via the <span class="term">json</span> parameter
        has this format:
    </p>

    @Html.Partial("_LogMessageFormat")

    <p>
        To set a default <span class="term">beforeSend</span> method for all ajax appenders,
        set the library wide option
        @Html.ViewLink("jsnlogjs-jl-setOptions", "JL.defaultBeforeSend")<text>.</text>
        An appender's own <span class="term">beforeSend</span> method takes priority over any
        <span class="term">JL.defaultBeforeSend</span> method.
    </p>

<h2>Caution</h2>

<p>
    JSNLog uses the 
    <span class="term">onreadystatechange</span> and
    <span class="term">status</span> properties of the 
    XMLHttpRequest object
    to detect whether the response to a log request was received. That allows is to 
    @Html.ViewLink("getstarted-handlinglostconnection", "deal with losing the Internet connection")<text>.</text>
</p>
<p>
    Your <span class="term">beforeSend</span> method will be called after jsnlog.js has set 
    its own <span class="term">onreadystatechange</span> handler. This means that if you decide to 
    set your own <span class="term">onreadystatechange</span> handler,
    make it call the original <span class="term">onreadystatechange</span> handler in addition to your own functionality,
    so jsnlog.js can continue handling connection lost situations.
</p>


<h2>Example: Add request headers</h2>

<p>
    Ensure that an additional request header 
    <span class="term">myheader</span>
    with value
    <span class="term">myvalue</span>
    is added to every log request to the server.
</p>

<pre>// Create beforeSend handler
var beforeSendExample = function (xhr) {
    xhr.setRequestHeader('myheader', 'myvalue');
};

// Create appender that uses beforeSendExample
var appender = JL.createAjaxAppender("example appender");
appender.setOptions({
    "beforeSend": beforeSendExample
});

// Get all loggers to use this appender
JL().setOptions({
    "appenders": [appender]
});
</pre>


