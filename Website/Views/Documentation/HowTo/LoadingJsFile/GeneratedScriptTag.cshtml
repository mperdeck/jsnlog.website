@using ViewExtensions
@using WebSite.App_Code

@{
    ViewBag.Title = "Generated script tag";
    ViewBag.Key = "getstarted-loadingjsfile-generatedscripttag";
    ViewBag.Description = "Generation of a script tag for jsnlog.js through configuration";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

<h2>Standard non-Core installation generates script tag</h2>
<p>
    When you install JSNLog using one of the non-Core Nuget packages
    JSNLog.Log4Net,
    JSNLog.NLog,
    JSNLog.Elmah,
    JSNLog.Serilog or
    JSNLog.CommonLogging,
    two things happen:
</p>
<ul>
    <li>
        Among other things, it adds a
        @Html.ViewLink("webconfig-jsnlog", "<jsnlog>")
        tag to your web.config,
        containing the location of your jsnlog.js file:
        <p>
            <pre>&lt;jsnlog productionLibraryPath="~/Scripts/jsnlog.min.js"&gt;
&lt;/jsnlog&gt;</pre>
        </p>
    </li>
    <li>
        The
        @Html.ViewLink("downloadinstall", "installation page", null, "addtoyourpages")
        will have suggested
        you include a call to the
        @Html.ViewLink("javascriptlogging-configure", "Configure")
        method in your pages
        (@Html.ViewLink("webconfig",
                    "exceptions",
                    fragment: "cannotcallconfigure")).
        That method inserts a
        &lt;script&gt; tag that loads the jsnlog.min.js file.
        It uses the url from the <span class="term">productionLibraryPath</span> property.
        You can verify this by doing a View Source of the page.
    </li>
</ul>

<h2>Generating script tags with Core applications</h2>
<p>
    When you
    @Html.ViewLink("downloadinstall-aspnetcore",
                        "install JSNLog in a .Net Core project")<text>,</text>
    the installation procedure relies on you to load the jsnlog.js onto your pages (using a
    &lt;script&gt; tag or otherwise).
</p>
<p>
    In this case, to have the &lt;script&gt; tag generated for you:
</p>
<ol>
    <li>
        The
        @Html.ViewLink("downloadinstall-aspnetcore", "UseJSNLog", fragment: "startup")
        method called in your Startup.cs file takes an
        @Html.ViewLink("webconfig-jsnlog", "JsnlogConfiguration")
        object.
        Set its
        <span class="term">productionLibraryPath</span> attribute
        to the url you want to use in the
        &lt;script&gt; tag.
    </li>
    <li>
        Add the tag helper
        @Html.ViewLink("jl-javascript-logger-definitions-taghelper", "jl-javascript-logger-definitions")
        to your pages (@Html.ViewLink("downloadinstall-aspnetcore", "how", fragment: "taghelper")).
    </li>
</ol>

<a id="stopscripttaggeneration"></a>
<h2>Stopping automatic generation of the script tag</h2>
<p>
    If you want to load the jsnlog.min.js file yourself, for example as part of a bundle or as an AMD module,
    you don't want the generated &lt;script&gt; tag. 
    </p>
<p>
    
    You can make it go away by simply not setting
    the <span class="term">productionLibraryPath</span> attribute.
</p>
@Html.Partial(@"Demos/_loadingjsfile2")
<p>
    Alternatively, you could simply remove the call
    to the
    @Html.ViewLink("javascriptlogging-configure", "Configure")
    method
    or
    the
    @Html.ViewLink("jl-javascript-logger-definitions-taghelper", "jl-javascript-logger-definitions")
    tag helper,
    but that has a few more
    @Html.ViewLink("webconfig",
                  "implications",
                  fragment: "cannotcallconfigure")<text>.</text>
</p>




