@using ViewExtensions

@{
    bool showNameAttribute =
        ((string)(ViewData["configSource"]) == "web.config");

    bool showTypeColumn =
        ((string)(ViewData["configSource"]) != "web.config");

    bool showIpRegexRemarks =
        ((string)(ViewData["configSource"]) == "web.config");

    string currentVersion = PageVersions.CurrentVersion();
}

<table class="table wide">
    @Html.Partial("_OptionsTableHeading", ViewData)
    <tbody>
        @if (showNameAttribute)
        {
            @Html.TableRowHtml("name", "optional",
        "(empty)",
        @"Name of the logger you want to configure. To configure the root logger,
          simply omit the <span class=""term"">name</span> attribute.<p/>" +
         Html.Partial("_LoggerRootNameOnServer"))
        }
        @Html.Partial("_SharedFilterTableRows", ViewData)
        @Html.TableRowHtml("appenders", "optional", (showTypeColumn ? "array of appenders" : null),
"(inherited from parent logger)",
@"One or more appenders for the logger to send its log messages to. " +
((currentVersion == "NodeJs") ? "On the server, you can also use Winston transports (" +
Html.ViewLink("getstarted-loggingtodb", "how") + "). " : "") +
@"See the examples.")
        @Html.TableRowHtml("onceOnly", "optional", (showTypeColumn ? "array of strings" : null),
        "(inherited from parent logger)",
        @"One or more regular expressions. When a message matches a regular expression, then
          any subsequent messages matching that same regular expression will be suppressed. See the remarks and examples.")
    </tbody>
</table>

@Html.Partial("_InheritanceAndDefaultLogger", ViewData)


@if (showIpRegexRemarks)
{
    @Html.Partial("_IpRegexRemarks")
}


<h3>Suppressing duplicate messages with onceOnly</h3>
<p>
    You may have JavaScript loggers inside code that gets called multiple times.
    As a result, you may get a series of messages that are essentially the same.
    Using <span class="term">onceOnly</span>, you can suppress the duplicate messages, so only the first
    message is sent to the server.
</p>
<p>
    This works by setting one or more regular expressions. When a log message
    matches one of the regular expressions, the logger remembers that there has been a message that matched that regular expression.
    Then when another message arrives that matches that same regular expression, it is suppressed.
</p>

<p>
    For example, if you receive these messages:
</p>
<pre>
    Parameter x too high - x = 5
    Parameter x too high - x = 6
    Parameter x too high - x = 7
    ...
    Parameter x too high - x = 49
    Parameter x too high - x = 50
</pre>
<p>
    Then you can use the regular expression:
</p>
<pre>
    Parameter x too high - x = 
</pre>
<p>
    To only receive the very first message:
</p>
<pre>
    Parameter x too high - x = 5
</pre>
<p>
    See the examples for how to set the regular expression.
</p>
<p>
    You can set multiple regular expressions. These work independently. So if a message matches
    the first regular expression, then if a second message matches the second regular expression but not the first,
    then the second message gets through because it is not a duplicate of the first message.
</p>
<p>
    As shown
    @Html.ViewLink("jsnlogjs-logger-log", "here", fragment: "Remarks"),
    you can log not only strings but also objects. If you log an object, the object is translated to a JSON string.
    That string is than matched against the regular expressions.
</p>


<p>
    Similar to other attributes, JavaScript loggers inherit
    <span class="term">onceOnly</span>
    from their parents. However, this is all or nothing. If you set
    <span class="term">onceOnly</span> regular expressions
    for a logger, than any  <span class="term">onceOnly</span> regular expressions that its parent may have had
    are disregarded.
</p>

