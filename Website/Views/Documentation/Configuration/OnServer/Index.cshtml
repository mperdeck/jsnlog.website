@using ViewExtensions
@using WebSite.App_Code

@{
    /**/

    ViewBag.Title = "On the server";
    ViewBag.Key = "configuration-onserver";
    ViewBag.Description = "Configuring JSNLog using server side code";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
    ViewBag.H1 = "Configuring JSNLog using server code";
}

@{
    bool isNetCore;
    bool isNetFramework;
    PageVersions.GetPageVersion(out isNetCore, out isNetFramework);
}

<p>
    JSNLog has 2 componets:
</p>
<ul>
    <li>
        A server side component that receives log messages from the client and hands them to a server side logging package. This is
        obviously configured on the server.
    </li>
    <li>
        A client side component (jsnlog.js) where the client side loggers live.
        JSNLog lets you configure this on either the server (described on this page) or the client
        (@Html.ViewLink("configuration-onclient", "details")).
    </li>
</ul>

<p>
    This page first shows how to
    @if (isNetCore)
    {
        <span class="net-core-only">
            <a href="#configcore">configure JSNLog in your Startup class Configure method</a>.
        </span>
    }
    @if (isNetFramework)
    {
        <span class="net-framework-only">
            <a href="#framework-code">configure JSNLog using code</a> or
            <a href="#framework-webconfig">in your web.config</a>.
        </span>
    }
</p>
<p>
    It then shows how to
    <a href="#clientsideconfigonserver">pass your configuration settings from the server to the client</a>.
</p>

@if (isNetCore)
{
    <div class="net-core-only">
        <a id="configcore"></a>
        <h2>Configure JSNLog in your Startup class Configure method</h2>

        @JsnlogConfigurationIntro()

        <p>
            To configure JSNLog in your server side code:
        </p>
        <ol>
            <li>
                Create an
                <span class="term">JsnlogConfiguration</span>
                object with the configuration properties you want;
            </li>
            <li>
                Pass it to the
                <span class="term">UseJSNLog</span>
                method that configures JSNLog in your middleware pipeline.
            </li>
        </ol>

        <p>
            The result will look like this:
        </p>
        @Html.Partial("_AddUseJsnlogToCorePipeline")
    </div>
}

@if (isNetFramework)
{
    <div class="net-framework-only">
        <a id="framework-code"></a>
        <h2>Configure JSNLog using code</h2>

        <p>
            You can configure JSNLog by calling the
            @Html.ViewLink("javascriptlogging-setjsnlogconfiguration", "SetJsnlogConfiguration") method
            when your site starts.
        </p>

        <p>
            This method takes a
            @Html.ViewLink("webconfig-jsnlog", "JsnlogConfiguration", onClick: "commonTabs.setJsnlogConfigurationTab()")
            object. This object has all the JSNLog configuration settings, including those for
            loggers, appenders, etc.
        </p>

        <p>
            More details and examples about calling <span class="term">SetJsnlogConfiguration</span> are
            @Html.ViewLink("javascriptlogging-setjsnlogconfiguration", "here")<text>.</text>
        </p>

        <a id="framework-webconfig"></a>
        <h2>Configure JSNLog in your web.config</h2>

        <p>
            First make sure there is an <span class="term">jsnlog</span> section
            in your
            &lt;configSections&gt;
            section:
        </p>
        <pre>&lt;configuration&gt;
    &lt;configSections&gt;
        <span class="addedcode">&lt;section name=&quot;jsnlog&quot; type=&quot;JSNLog.ConfigurationSectionHandler, JSNLog&quot;
            requirePermission=&quot;false&quot; /&gt;</span>
            ...
    &lt;/configSections&gt;
    ...
&lt;/configuration&gt;
</pre>

        <p>
            You can now configure JSNLog by adding a
            @Html.ViewLink("webconfig-jsnlog", "<jsnlog>", onClick: "commonTabs.setWebConfigTab()")
            section
            inside the
            &lt;configuration&gt;
            section, and by optionally adding
            @Html.ViewLink("webconfig-logger", "<logger>", onClick: "commonTabs.setWebConfigTab()"),
            @Html.ViewLink("webconfig-ajaxappender", "<ajaxAppender>", onClick: "commonTabs.setWebConfigTab()") and
            @Html.ViewLink("webconfig-consoleappender", "<consoleAppender>", onClick: "commonTabs.setWebConfigTab()")
            subsections.
        </p>
        <p>
            For example:
        </p>
        <pre>&lt;configuration&gt;
    &lt;configSections&gt;
    &lt;section name=&quot;jsnlog&quot; type=&quot;JSNLog.ConfigurationSectionHandler, JSNLog&quot;
            requirePermission=&quot;false&quot; /&gt;
            ...
    &lt;/configSections&gt;
    ...
        <span class="addedcode">&lt;jsnlog</a>&gt;
        &lt;logger level=&quot;3000&quot; /&gt;
    &lt;/jsnlog&gt;</span>
&lt;/configuration&gt;
</pre>
    </div>
}

@helper JsnlogConfigurationIntro()
{
    <p>
        All server side configuration, including loggers, appenders, etc., can be defined using the
        @Html.ViewLink("webconfig-jsnlog", "JsnlogConfiguration", onClick: "commonTabs.setJsnlogConfigurationTab()")
        class.
    </p>
}

<a id="clientsideconfigonserver"></a>
<h2>Pass your configuration settings from the server to the client</h2>

<p>
    When you configure client side loggers, appenders, etc. on the server,
    that configuration information has to somehow travel to the client, so jsnlog.js
    can create the loggers, etc. you configured.
</p>

@if (isNetFramework)
{
    <div class="net-framework-only">
        <h3>Call Configure method</h3>
        <p>
            To make that happen,
            call JSNLog's
            @Html.ViewLink("javascriptlogging-configure", "Configure")
            method in your pages, before the first JavaScript script tags.

        </p>
        @Html.Partial("_CallingConfigure")
    </div>
}

@if (isNetCore)
{
    <div class="net-core-only">
        @Html.Partial("_CallingJlJavascriptLoggerDefinitions")
    </div>
}

<p>
    This translates the server side configuration into
    calls to
    @Html.ViewLink("configuration-onclient", "configuration methods in jsnlog.js")<text>.</text>
    It then injects this JavaScript code as a script block into your page.
</p>

@if (isNetFramework)
{
    <div class="net-framework-only">
        <h3>This automatically generates a script tag</h3>
        <p>
            The <span class="term">Configure</span> method automatically
            generates a script tag that loads the jsnlog.js JavaScript library.
        </p>

        <p>
            To stop this, edit your web.config
            and make sure the
            &lt;jsnlog&gt; tag doesn't have a
            <span class="term">productionLibraryPath</span> attribute:
        </p>
        <pre>
&lt;jsnlog <del>productionLibraryPath=&quot;~/Scripts/jsnlog.min.js&quot;</del>&gt;
&lt;/jsnlog&gt;</pre>
    </div>
}
