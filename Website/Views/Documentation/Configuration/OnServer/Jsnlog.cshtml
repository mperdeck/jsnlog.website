@using ViewExtensions
@using System.Web.Mvc

@{
    ViewBag.Order = "100";
    ViewBag.Title = "JSNLog";
    ViewBag.Key = "webconfig-jsnlog";
    ViewBag.Description = "The root for all JSNLog configuration elements.";
    Layout = "~/Views/Shared/_ElementLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

@section Definition {
    <div class="commontabs">
        <div data-tab="Web.config">

            <pre>&lt;configuration&gt; 
    &lt;jsnlog
        enabled="true|false"
        maxMessages="number"
        defaultAjaxUrl="string"
        corsAllowedOriginsRegex="string"
        serverSideLogger="string"
        serverSideLevel="number|TRACE|DEBUG|INFO|WARN|ERROR|FATAL" 
        serverSideMessageFormat="string"
        dateFormat="string"
        productionLibraryPath="string" &gt;
    &lt;/jsnlog&gt;
&lt;/configuration&gt;</pre>

            @{
                var childrenTable = Html.ChildrenTable(column1Header: "Element", cssClass: "table medium");
            }
            @if (!MvcHtmlString.IsNullOrEmpty(childrenTable))
    {
                <h2>Child Elements</h2>
                @childrenTable
            }

        </div>
        <div data-tab="JsnlogConfiguration">

            <pre>public class JsnlogConfiguration
{
    public bool enabled { get; set; }
    public uint maxMessages { get; set; }
    public string defaultAjaxUrl { get; set; }
    public string corsAllowedOriginsRegex { get; set; }
    public string serverSideLogger { get; set; }
    public string serverSideLevel { get; set; }
    public string serverSideMessageFormat { get; set; }
    public string dateFormat { get; set; }
    public string productionLibraryPath { get; set; }<br />
    public List&lt;@Html.ViewLink("webconfig-logger", "Logger")&gt; loggers { get; set; }
    public List&lt;@Html.ViewLink("webconfig-ajaxappender", "AjaxAppender")&gt; ajaxAppenders { get; set; }
    public List&lt;@Html.ViewLink("webconfig-consoleappender", "ConsoleAppender")&gt; consoleAppenders { get; set; }
}</pre>

        </div>
    </div>
    }

    @section Remarks {
        <p>
            This element
            has
            two sets of attributes:
            </p>
        <ul>
            <li>
            Those that apply to JSNLog's client side library jsnlog.js, dealing with loggers and appenders;
            </li>
            <li>
    Those that apply to JSNLog's server side component, dealing with CORS and processing of log messages.
            </li>
        </ul>

        <h3>Client side attributes</h3>

        <table class="table wide">
            @Html.Partial("_OptionsTableHeading", new ViewDataDictionary {
                { "configSource", "web.config"}
            })
            <tbody>
                @Html.TableRowHtml("enabled", "optional", "true",
                @"If false, all loggers are disabled.")
                @Html.TableRowHtml("maxMessages", "optional", "no maximum", "Limits total number of messages sent to the server. See remarks below.")
                @Html.TableRowHtml("defaultAjaxUrl", "optional", "see remarks", "Default url used by ajax appenders when no url is set. See remarks below.")
            </tbody>
        </table>

        <h3>Server side attributes</h3>

        <table class="table wide">
            @Html.Partial("_OptionsTableHeading", new ViewDataDictionary {
                { "configSource", "web.config"}
            })
            <tbody>
                @Html.TableRowHtml("corsAllowedOriginsRegex", "optional", "see remarks", "CORS related. Matches allowed domains. See remarks below.")
                @Html.TableRowHtml("serverSideLogger", "optional", "(empty)",
                @"By default, all log messages from your JavaScript code are passed on to your server side logging package
    with the name of the JavaScript logger.
    <p/>
    However, if you want to use a specific logger name for all your JavaScript log messages, you can specify that with this attribute.")
                @Html.TableRowHtml("serverSideLevel", "optional", "(empty)",
                @"By default, all log messages from your JavaScript code are passed on to your server side logging package with the same level as the original JavaScript log message.
    <p/>
    However, if you want to use a specific level, you can specify that with this attribute.")
                @Html.TableRowHtml("serverSideMessageFormat", "optional", "%message",
                @"See remarks.")
                @Html.TableRowHtml("dateFormat", "optional", "o",
                @"<a href=""https://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx"" target=""_blank"">Custom</a> or
    <a href=""https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx"" target=""_blank"">standard</a>
    date format string that determines how dates are formatted in the log. The default adheres to the
    <a href=""https://en.wikipedia.org/wiki/ISO_8601"" target=""_blank"">ISO 8601</a> standard.")
                @Html.TableRowHtml("productionLibraryPath", "optional", "(empty)",
                @"Only used with ASP.NET 4.x. Path to the jsnlog.min.js file. If this is given, the " +
                Html.ViewLink("javascriptlogging-configure", "Configure") +
                " method generates a &lt;script&gt; tag with this url (" +
                Html.ViewLink("getstarted-loadingjsfile", "alternatives") +
                ").")
            </tbody>
        </table>

        @Html.Partial("_DefaultAjaxUrlRemarks", new ViewDataDictionary {
            { "configSource", "web.config"},
        })

            <h3>corsAllowedOriginsRegex</h3>
            <p>
                When setting <i>defaultAjaxUrl</i>
                or the
                    @Html.ViewLink("webconfig-ajaxappender", "url attribute on an AjaxAppender")<text>,</text>
            you can use a url with a domain different from the domain you use for your site.
            For example, your site is on <i>mydomain.com</i>, but you want to send log entries to <i>api.mydomain.com</i>
                or <i>anotherdomain.com</i>.
                </p>
        <p>
    To make this happen, set <i>corsAllowedOriginsRegex</i> to a regular expression that matches
            all domains that JSNLog should accept log requests from.
    Otherwise your log requests will be ignored
            <text>(</text>@Html.ViewLink("getstarted-cors", "examples")<text>).</text>
            </p>
    <p>
    This only applies to cross domain logging.
    You don't have to set <i>corsAllowedOriginsRegex</i> if you send log entries to the same domain as where your site is located
        (the most common case).
            </p>

        @Html.Partial("_MaxMessagesRemarks", new ViewDataDictionary {
            { "configSource", "web.config"},
        })

        <a id="serverSideMessageFormat"></a><h3>serverSideMessageFormat</h3>

        <p>
            Your server not only receives the the original message passed into the JavaScript logger,
            but also the logger, the level, a timestamp, etc.
        </p>
        <p>
            You can choose to have this additional information logged on the server along with
            the original message, by setting <span class="term">serverSideMessageFormat</span> to a format string with
            one or more place holders:
        </p>

        <table class="table wide">
            <thead>
                <tr>
                    <th>Place holder</th>
                    <th>Is replaced by</th>
                </tr>
            </thead>
            <tbody>
                <tr valign="top">
                    <td>%message</td>
                    <td>Original message given to the JavaScript logger.</td>
                </tr>
                <tr valign="top">
                    <td>%jsonmessage</td>
                    <td>Original message given to the JavaScript logger, as a valid JSON value. See below.</td>
                </tr>
                <tr valign="top">
                    <td>%utcDate</td>
                    <td>Date and time in UTC when the message was generated, according to the client's clock.</td>
                </tr>
                <tr valign="top">
                    <td>%utcDateServer</td>
                    <td>Date and time in UTC when the message was received by the server, according to the server's clock.</td>
                </tr>
                <tr valign="top">
                    <td>%date</td>
                    <td>
                        Date and time when the message was generated, according to the client's clock.
                        This equals %utcDate converted to the server's local time.
                    </td>
                </tr>
                <tr valign="top">
                    <td>%dateServer</td>
                    <td>Date and time in the server's local time when the message was received by the server, according to the server's clock.</td>
                </tr>
                <tr valign="top">
                    <td>%level</td>
                    <td>Level of the message, as provided by the JavaScript code.</td>
                </tr>
                <tr valign="top">
                    <td>%userAgent</td>
                    <td>Identifies the make of the browser.</td>
                </tr>
                <tr valign="top">
                    <td>%userHostAddress</td>
                    <td>IP address(es) of the sender of the request (details below).</td>
                </tr>
                <tr valign="top">
                    <td>%url</td>
                    <td>Url of the page on which the message was generated.</td>
                </tr>
                <tr valign="top">
                    <td>%logger</td>
                    <td>JavaScript logger that generated the message.</td>
                </tr>
                <tr valign="top">
                    <td>%requestId</td>
                    <td>
                        Identifies the request for which the log message was created.
                        <p />
                        If you 
                        @Html.ViewLink("webconfig", "use server side configuration")
                        this request id will be generated for you. Otherwise, set this request id
                        in your JavaScript
                        using the
                        @Html.ViewLink("jsnlogjs-jl-setOptions", "JL.setOptions")
                        method.
                    </td>
                </tr>
                <tr valign="top">
                    <td>%entryId</td>
                    <td>
                        @Html.Partial("_EventIdDescription")
                    </td>
                </tr>
                <tr valign="top">
                    <td>%newline*</td>
                    <td>Newline character</td>
                </tr>
            </tbody>
        </table>
        <p>
            *<small> If you use Elmah, %newline won't result in a newline in the elmah.axd page, because Elmah doesn't convert line breaks to HTML &lt;br /&gt; tags.</small>
        </p>

        <p>
            An alternative way to add information to your log messages is writing your own
            @Html.ViewLink("javascriptlogging-onlogging", "logging event handler")<text>.</text>
            This gives you access to the cookies, request headers and query parameters
            of the incoming log request. It also allows you stop a message from being logged based on its content.
        </p>

        <a id="jsonmessage"></a><h4>%message and %jsonmessage</h4>

        <p>
            Most people store log messages as unstructured strings of text. If that is you, you can skip this section.
            However, if you store log messages as valid JSON objects, read on.
        </p>

        <p>
            Both <span class="term">%message</span> and <span class="term">%jsonmessage</span> are replaced by a string
            that represents the message that was logged.
            The difference is that whereas <span class="term">%message</span> is replaced by the log message as-is,
            <span class="term">%jsonmessage</span> is replaced by a string that can be used in a JSON message.
        </p>
        <p>
            To clarify the issue, see the table below:
        </p>
        <table class="table">
            <tr valign="top">
                <th>JavaScript</th>
                <th>%message</th>
                <th>%jsonmessage</th>
            </tr>
            <tr valign="top">
                <td>
                    JL().error("O'Connell");
                </td>
                <td>
                    O'Connell
                </td>
                <td>
                    "O\u0027Connell"
                </td>
            </tr>
            <tr valign="top">
                <td>
                    JL().error({"f1": "v1", "f2": "v2"});
                </td>
                <td>
                    {"f1": "v1", "f2": "v2"}
                </td>
                <td>
                    {"f1": "v1", "f2": "v2"}
                </td>
            </tr>
        </table>
        <p>
            As you see, there is no difference when logging an object (in the second row). But when logging a simple string,
            <span class="term">%message</span> is replaced by the string, while
            for <span class="term">%jsonmessage</span> the string is escaped and quoted.
        </p>
        <p>
            This is important if you want to write valid JSON strings to your log. Suppose you attempted to do that using:
        </p>
        <pre>serverSideMessageFormat=&quot;{ 'Message': %message }&quot;</pre>
        <p>
            That would work well if you only logged objects. But if you logged the string <span class="term">O'Connell</span>, that would result in:
        </p>
        <pre>{ 'Message': O'Connell }</pre>
        <p>
            Which is not a valid JSON string. However, if you'd use:
        </p>
        <pre>serverSideMessageFormat=&quot;{ 'Message': <span class="addedcode">%jsonmessage</span> }&quot;</pre>
        <p>
            The result would be a valid JSON string:
        </p>
        <pre>{ 'Message': "O\u0027Connell" }</pre>

        <h4>serverSideMessageFormat and structured logging</h4>
        <p>
            If you create structured logs using
            <a href="http://serilog.net/" target="_blank">Serilog</a>,
            make sure that your format string results in a valid JSON string. Otherwise it will be logged as a string rather than an object.
        </p>
        <p>
            Take for example:
        </p>
    <pre>serverSideMessageFormat=&quot;Sent: %date, Browser: %userAgent, Message: %message&quot;</pre>
        <p>
            This will result in a string such as this in your log:
        </p>
        <pre>"{ 'Sent': 2014-08-19 21:02:42,603, 'Browser': 'Mozilla/5.0 ...', 'Message': {\"x\":5,\"y\":88} }"</pre>
        <p>
            To get a structured object instead, make sure that the result of your format string is a valid JSON string. For example:
        </p>
        <pre>serverSideMessageFormat=&quot;<span class="addedcode">{ '</span>Sent<span class="addedcode">'</span>: <span class="addedcode">'</span>%date<span class="addedcode">'</span>, <span class="addedcode">'</span>Browser<span class="addedcode">'</span>: <span class="addedcode">'</span>%userAgent<span class="addedcode">'</span>, <span class="addedcode">'</span>Message<span class="addedcode">'</span>: <span class="addedcode">%jsonmessage</span> <span class="addedcode">}</span>&quot;</pre>
        <p>
            Note:
        </p>
        <ul>
            <li>
                The curly braces;
            </li>
            <li>
                Field names have been quoted.
            </li>
            <li>
                <span class="term">%date</span> and <span class="term">%userAgent</span> have been quoted as well, to make them strings.
            </li>
            <li>
                <span class="term">%message</span> has been replaced by <span class="term">%jsonmessage</span>, which has not been quoted.
                That way, when you log objects, they will be logged as objects rather than strings.
            </li>
        </ul>
        <p>
            This will result in an object such as this in your log:
        </p>
        <pre>{ "Sent" : "2014-08-19 21:02:42,603", "Browser" : "Mozilla/5.0 ...", "Message" : { "x" : 5, "y" : 88 } }</pre>

        <p>
            Finally, the default value of
            <span class="term">serverSideMessageFormat</span>
            gives you structured logging out of the box,
            even though the default is <span class="term">%message</span>.
            The reason is that the Serilog adapter that is used by JSNLog to log to Serilog
            regards all strings that are not valid JSON strings as simple strings that are to be logged as-is.
        </p>


@Html.Partial("_WorkingOutSenderIpAddress")

    }

    @section Examples {
        <p>
            This shows the date and time that the log message was created on the client as well as the user agent
            in each log message.
        </p>
        @Html.Partial(@"Demos/_jsnlog1")

        <p>
            This processes all client side JavaScript log messages via the server side logger "jslogger".
        </p>
@Html.Partial(@"Demos/_jsnlog2")


        <p>
            This disables all JavaScript loggers.
        </p>
@Html.Partial(@"Demos/_jsnlog3")


    }





