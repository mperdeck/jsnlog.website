@using ViewExtensions
@using WebSite.App_Code

@{
    string appenderType = (string)(ViewData["objectType"]);

    string configSource = (string)(ViewData["configSource"]);

    bool webConfigSpecific =
        ((string)(ViewData["configSource"]) == "web.config");

    bool showNameAttribute =
        ((string)(ViewData["configSource"]) == "web.config");

    bool showTypeColumn =
        ((string)(ViewData["configSource"]) != "web.config");
        
    string keyLoggerOptions =
        ((string)(ViewData["configSource"]) == "web.config") ? "webconfig-logger" : "jsnlogjs-logger-setOptions";

    bool showUrlTableRow = (appenderType == "AjaxAppender");

    bool showBeforeSendTableRow = (appenderType == "AjaxAppender") && (configSource == "jsnlog.js");

    string currentVersion = PageVersions.CurrentVersion();
}

    <table class="table wide">
        @Html.Partial("_OptionsTableHeading",ViewData)
        <tbody>
       @if (showNameAttribute)
       {
            @Html.TableRowHtml("name", "required", 
            "",
                @"Name of the " + appenderType + " you want to configure.")
       }
        @Html.Partial("_SharedFilterTableRows",ViewData)
        @Html.TableRowHtml("storeInBufferLevel", "optional", (showTypeColumn ? "number" : null), "ALL",
                @"If the severity of the log message is equal or greater than this,
                 but smaller than <span class=""term"">level</span>,
                 the log message will not be sent to the server, but stored in an internal buffer.
                <p>
                If <span class=""term"">bufferSize</span> is 0 or less, the log message is simply ignored.
                ")
        @Html.TableRowHtml("sendWithBufferLevel", "optional", (showTypeColumn ? "number" : null), "OFF",
                @"If the severity of a log message is equal or greater than this,
                 not only the log message but also all log messages stored in the internal buffer
                 will be sent to the server.
                <p>
                This allows you to store low priority trace messages in the internal buffer,
                and only send them when a high priority fatal message is sent.
                ")
        @Html.TableRowHtml("bufferSize", "optional", (showTypeColumn ? "number" : null), "0",
                @"Sets the size of the buffer used with <span class=""term"">sendWithBufferLevel</span> and
                 <span class=""term"">storeInBufferLevel</span>.")
        @Html.TableRowHtml("batchSize", "optional", (showTypeColumn ? "number" : null), "1",
                @"Allows you to improve performance by sending multiple log messages in one go, 
                rather than one by one. See below.")
            @Html.TableRowHtml("batchTimeout", "optional", (showTypeColumn ? "number" : null), "(no&nbsp;timeout)",
                @"Usefull when batching log messages. If set, log messages are guaranteed to be sent within this period (in milli seconds),
                even if the batch size has not been reached yet. See below.")
        @if (appenderType == "AjaxAppender")
        {
            @Html.TableRowHtml("maxBatchSize", "optional", (showTypeColumn ? "number" : null), "20",
                @"When the server is unreachable and log messages are being stored until it is reachable again, this is the
                    maximum number of messages that will be stored. Cannot be smaller than batchSize. See below.")
            @Html.TableRowHtml("sendTimeout", "optional", (showTypeColumn ? "number" : null), "5000",
                @"If no response has been received for a log request after this many milli seconds, the outstanding request is aborted
                    and a new request sent with the log messages. See below.")
        }
            @if (showUrlTableRow)
            { 
        @Html.TableRowHtml("url", "optional", (showTypeColumn ? "string" : null), Utils.DefaultAjaxUrlLink((string)ViewData["configSource"]),
                @"All log messages will be sent to this URL. See below.")
            }
            @if (showBeforeSendTableRow)
            { 
        @Html.TableRowHtml("beforeSend", "optional", "function", "(empty)",
                @"Function called before an AJAX request is sent to the server. Lets you set request headers, etc. See below.")
            }
        </tbody>
    </table>

<h3>Logger level and appender level</h3>
<p>
    Notice that both 
                @Html.ViewLink(keyLoggerOptions, "loggers")
     and appenders have a level. This means that a log message must have 
    a severity that is equal or higher than both these levels in order to be processed.
</p>

@Html.Partial("_WorkingOutSenderIpAddress")

            @if (showBeforeSendTableRow)
            { 
<a id="beforeSend"></a><h3>beforeSend</h3>
<p>
    The beforeSend field lets you set a function that is called right before 
    an AJAX request with log messages is sent to the server. It receives these parameters:
</p>
<pre>beforeSend(xhr: XMLHttpRequest, json: any)</pre>

<table class="table medium no-borders">
    <tr>
        <th>xhr</th>
        <td>
            <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a>
            object used to send the request.
            Allows you to for example add your own request headers.
        </td>
    </tr>
    <tr>
        <th>json</th>
        <td>
            Message to be sent. Allows you to modify this message before it is sent. See below.
        </td>
    </tr>
</table>

<p>
    The message passed in via the <span class="term">json</span> parameter
    has this format:
</p>

@Html.Partial("_LogMessageFormat")

<p>
    To set a default <span class="term">beforeSend</span> method for all ajax appenders,
    set the library wide option 
    @Html.ViewLink("jsnlogjs-jl-setOptions", "JL.defaultBeforeSend")<text>.</text>
    An appender's own <span class="term">beforeSend</span> method takes priority over any
    <span class="term">JL.defaultBeforeSend</span> method.
</p>                
            }


<h3 id="appender-batching">Batching (batchSize and batchTimeout)</h3>

@if (appenderType == "AjaxAppender")
{
    <p>
        By default, each log message is sent to the server in its own HTTP request. If there are many log messages,
        this will lead to many HTTP requests.
    </p>
    <p>
        You can reduce the number of HTTP requests by setting <span class="term">batchSize</span>.
        Log messages will be stored in a batch buffer. When the buffer is full, the messages are sent to the server
        in one HTTP request.
    </p>
    <p>
        The batch buffer is different from the buffer used for the
        <span class="term">storeInBufferLevel</span>
        and
        <span class="term">sendWithBufferLevel</span>
        options. If you use these options, and a high priority message is logged,
        the messages are moved to the batch buffer so they can be sent to the server.
    </p>

    <p>
        Options to force JSNLog to send all messages in the batch buffer even if it isn't full yet:
    </p>
    <ul>
        <li>
            Set the <span class="term">batchTimeout</span> option. This allows you to set a limit on how long messages
            will sit in the batch buffer until they are sent to the server.
        </li>
        <li>
            In your JavaScript, call the
            @Html.ViewLink("jsnlogjs-ajaxappender-sendBatch", "sendBatch")
            method on the appender to flush the batch buffer.
        </li>
    </ul>
}
else
{
    <p>
        Log message batching is built into all appenders. However, it makes mostly sense on AJAX appenders.
        @Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "Details on log message batching with AJAX appenders", fragment: "appender-batching")<text>.</text>
    </p>
}

@if (appenderType == "AjaxAppender")
{
    <h3 id="unreachable-server">Coping when the server is unreachable (maxBatchSize and sendTimeout)</h3>

    <p>
        The server may not always be reachable. For example, if your site runs on a mobile phone and the user travels through a tunnel,
        the Internet connection will be temporarily lost.
    </p>
    <p>
        When jsnlog.js can't send log messages to the server, it keeps them in the batch buffer. Meanwhile, 
        if your JavaScript code keeps logging messages, they will be added to the batch buffer. So the number of messages in the buffer
        keeps growing while the server is unreachable.
    </p>
    <p>
        <span class="term">maxBatchSize</span>
        limits how large the buffer can grow. If the number of messages in the buffer gets this high, subsequent messages
        no longer get stored and are discarded. 
    </p>
    <p>
        When the server becomes reachable again, all messages in the batch buffer are sent in one big batch.
        If any messages were discarded, an additional log message with severity <span class="term">WARN</span>
        will be sent in the same batch to let you know.
    </p>
    <p>
        <span class="term">sendTimeout</span> is the period in milli seconds after which
        jsnlog.js gives up waiting for a response to a log request. After a timeout, the old log request is aborted
        and a new log request sent with all the messages in the buffer. That means that if message were added to the buffer
        while the response was outstanding, those new messages will be sent as well.
    </p>
    <p>
        jsnlog.js may find out well before this timeout that no success response will be received. For example,
        it will be told immediately that the connection to the Internet is gone when it tries to send a request.
        However, in order to not put too much load on the device, jsnlog.js will wait 
        <span class="term">sendTimeout</span> milli seconds anyway before sending another log request.
    </p>

    <p>
        Do not set 
        <span class="term">maxBatchSize</span> 
        to a value lower than the value for
        <span class="term">batchSize</span>. An exception will be thrown if you do.
    </p>
}

@if(showUrlTableRow)
{
    <h3>url</h3>

    <p>
        The url that this AjaxAppender sends log requests to.  
        The default url is <span class="term">@SiteConstants.DefaultDefaultAjaxUrl</span>.
    </p>

    if (currentVersion != "NetJs")
    {
        <p>
            If you send the log requests to a domain different from that of your site
            (such as <i>logger.mydomain.com/jsnlog.logger</i>),
            make sure the server side end point where you receive log requests 
            <a href="http://www.html5rocks.com/en/tutorials/cors/" target="_blank">implements the CORS protocol</a>. 
            Otherwise the browser won't send log requests to your end point.
        </p>
    }
    else
    {
        <p>
            In addition to setting this option, 
            you may have to take 
            @Html.ViewLink("getstarted-cors", "these additional steps")
            to make sure the server receives log requests correctly.
        </p>
    }
}



