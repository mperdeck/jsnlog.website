@using ViewExtensions
@using JSNLog.Infrastructure

@{
    string appenderType = (string)(ViewData["objectType"]);

    string configSource = (string)(ViewData["configSource"]);

    bool webConfigSpecific =
        ((string)(ViewData["configSource"]) == "web.config");

    bool showNameAttribute =
        ((string)(ViewData["configSource"]) == "web.config");

    bool showTypeColumn =
        ((string)(ViewData["configSource"]) != "web.config");
        
    string keyLoggerOptions =
        ((string)(ViewData["configSource"]) == "web.config") ? "webconfig-logger" : "jsnlogjs-logger-setOptions";

    bool showUrlTableRow = (appenderType == "AjaxAppender");

    bool showBeforeSendTableRow = (appenderType == "AjaxAppender") && (configSource == "jsnlog.js");

    string currentVersion = PageVersions.CurrentVersion();
}

    <table class="table wide">
        @Html.Partial("_OptionsTableHeading",ViewData)
        <tbody>
       @if (showNameAttribute)
       {
            @Html.TableRowHtml("name", "required", 
            "",
                @"Required. Name of the " + appenderType + " you want to configure. Must be unique across all appenders.")
       }
        @Html.Partial("_SharedFilterTableRows",ViewData)
        @Html.TableRowHtml("storeInBufferLevel", "optional", (showTypeColumn ? "number" : null), "ALL",
                @"If the severity of the log message is equal or greater than this,
                 but smaller than <span class=""term"">level</span>,
                 the log message will not be sent to the server, but stored in an internal buffer.
                <p>
                If <span class=""term"">bufferSize</span> is 0 or less, the log message is simply ignored.
                ")
        @Html.TableRowHtml("sendWithBufferLevel", "optional", (showTypeColumn ? "number" : null), "OFF",
                @"If the severity of a log message is equal or greater than this,
                 not only the log message but also all log messages stored in the internal buffer
                 will be sent to the server.
                <p>
                This allows you to store low priority trace messages in the internal buffer,
                and only send them when a high priority fatal message is sent.
                ")
        @Html.TableRowHtml("bufferSize", "optional", (showTypeColumn ? "number" : null), "0",
                @"Sets the size of the buffer used with <span class=""term"">sendWithBufferLevel</span> and
                 <span class=""term"">storeInBufferLevel</span>.")
        @Html.TableRowHtml("batchSize", "optional", (showTypeColumn ? "number" : null), "1",
                @"Allows you to improve performance by sending multiple log messages in one go, 
                rather than one by one (" + Html.ViewLink("getstarted-logmessagebatching", "details") + ").")
            @Html.TableRowHtml("batchTimeout", "optional", (showTypeColumn ? "number" : null), "(no&nbsp;timeout)",
                @"Usefull when batching log messages. If set, log messages are guaranteed to be sent within this period (in milli seconds),
                even if the batch size has not been reached yet (" + Html.ViewLink("getstarted-logmessagebatching", "details") + ").")
        @if (appenderType == "AjaxAppender")
        {
            @Html.TableRowHtml("maxBatchSize", "optional", (showTypeColumn ? "number" : null), "20",
                @"When the server is unreachable and log messages are being stored until it is reachable again, this is the
                    maximum number of messages that will be stored. Cannot be smaller than batchSize (" + Html.ViewLink("getstarted-handlinglostconnection", "details") + ").")
            @Html.TableRowHtml("sendTimeout", "optional", (showTypeColumn ? "number" : null), "5000",
                @"If no response has been received for a log request after this many milli seconds, the outstanding request is aborted
                    and a new request sent with the log messages (" + Html.ViewLink("getstarted-handlinglostconnection", "details") + ").")
        }
            @if (showUrlTableRow)
            { 
        @Html.TableRowHtml("url", "optional", (showTypeColumn ? "string" : null), Utils.DefaultAjaxUrlLink((string)ViewData["configSource"]),
                @"All log messages will be sent to this URL. See below.")
            }
            @if (showBeforeSendTableRow)
            { 
        @Html.TableRowHtml("beforeSend", "optional", "function", "(empty)",
                @"Function called before an AJAX request is sent to the server. Lets you set request headers, etc (" + Html.ViewLink("getstarted-addingrequestheaders", "details") + ").")
            }
        </tbody>
    </table>

<h3>Logger level and appender level</h3>
<p>
    Notice that both 
                @Html.ViewLink(keyLoggerOptions, "loggers")
     and appenders have a level. This means that a log message must have 
    a severity that is equal or higher than both these levels in order to be processed.
</p>

@Html.Partial("_WorkingOutSenderIpAddress")

@if(showUrlTableRow)
{
    <h3>url</h3>

    <p>
        The url that this AjaxAppender sends log requests to.  
        The default url is <span class="term">@SiteConstants.DefaultDefaultAjaxUrl</span>.
    </p>

    if (currentVersion != "NetJs")
    {
        <p>
            If you send the log requests to a domain different from that of your site
            (such as <i>logger.mydomain.com/jsnlog.logger</i>),
            make sure the server side end point where you receive log requests 
            <a href="http://www.html5rocks.com/en/tutorials/cors/" target="_blank">implements the CORS protocol</a>. 
            Otherwise the browser won't send log requests to your end point.
        </p>
    }
    else
    {
        <p>
            In addition to setting this option, 
            you may have to take 
            @Html.ViewLink("getstarted-cors", "these additional steps")
            to make sure the server receives log requests correctly.
        </p>
    }
}



