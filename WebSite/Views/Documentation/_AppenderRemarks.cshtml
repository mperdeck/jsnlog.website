@using ViewExtensions
@using WebSite.App_Code

@{
    string appenderType = (string)(ViewData["objectType"]);

    string configSource = (string)(ViewData["configSource"]);

    bool showNameAttribute =
        ((string)(ViewData["configSource"]) == "web.config");

    bool showTypeColumn =
        ((string)(ViewData["configSource"]) != "web.config");
        
    string keyLoggerOptions =
        ((string)(ViewData["configSource"]) == "web.config") ? "webconfig-logger" : "jsnlogjs-logger-setOptions";

    bool showUrlTableRow = (appenderType == "AjaxAppender");

    bool showBeforeSendTableRow = (appenderType == "AjaxAppender") && (configSource == "jsnlog.js");
}

    <table class="table wide">
        @Html.Partial("_OptionsTableHeading",ViewData)
        <tbody>
       @if (showNameAttribute)
       {
            @Html.TableRowHtml("name", "required", 
            "",
                @"Name of the " + appenderType + " you want to configure.")
       }
        @Html.Partial("_SharedFilterTableRows",ViewData)
        @Html.TableRowHtml("storeInBufferLevel", "optional", (showTypeColumn ? "number" : null), "ALL",
                @"If the severity of the log message is equal or greater than this,
                 but smaller than <span class=""term"">level</span>,
                 the log message will not be sent to the server, but stored in an internal buffer.
                <p>
                If <span class=""term"">bufferSize</span> is 0 or less, the log message is simply ignored.
                ")
        @Html.TableRowHtml("sendWithBufferLevel", "optional", (showTypeColumn ? "number" : null), "OFF",
                @"If the severity of a log message is equal or greater than this,
                 not only the log message but also all log messages stored in the internal buffer
                 will be sent to the server.
                <p>
                This allows you to store low priority trace messages in the internal buffer,
                and only send them when a high priority fatal message is sent.
                ")
        @Html.TableRowHtml("bufferSize", "optional", (showTypeColumn ? "number" : null), "0",
                @"Sets the size of the buffer used with <span class=""term"">sendWithBufferLevel</span> and
                 <span class=""term"">storeInBufferLevel</span>.")
        @Html.TableRowHtml("batchSize", "optional", (showTypeColumn ? "number" : null), "1",
                @"Allows you to improve performance by sending multiple log messages in one go, 
                rather than one by one.")
            @if (showUrlTableRow)
            { 
        @Html.TableRowHtml("url", "optional", (showTypeColumn ? "string" : null), Utils.DefaultAjaxUrlLink((string)ViewData["configSource"]),
                @"All log messages will be sent to this URL.
The default url is as expected by the server side code of JSNLog.")
            }
            @if (showBeforeSendTableRow)
            { 
        @Html.TableRowHtml("beforeSend", "optional", "function", "(empty)",
                @"Function called before an AJAX request is sent to the server. Lets you set request headers, etc. See below.")
            }
        </tbody>
    </table>

<h3>Logger level and appender level</h3>
<p>
    Notice that both 
                @Html.ViewLink(keyLoggerOptions, "loggers")
     and appenders have a level. This means that a log message must have 
    a severity that is equal or higher than both these levels in order to be processed.
</p>

<h3>beforeSend</h3>
<p>
    The beforeSend field lets you set a function that is called right before 
    an AJAX request with log messages is sent to the server.
</p>
<p>
    It takes one parameter:
    the <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a>
    object that is used to send the request.
    This allows you to for example add your own request headers.
</p>














