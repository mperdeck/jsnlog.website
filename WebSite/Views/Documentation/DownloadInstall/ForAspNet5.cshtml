@using WebSite.App_Code
@using ViewExtensions

@{
    ViewBag.Title = "JavaScript Logging for ASP.NET 5";
    ViewBag.H1 = "JavaScript Logging for ASP.NET 5";
    ViewBag.Key = "downloadinstall-aspnet5";
    ViewBag.Description = "Installation for ASP.NET 5";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

<ul>
    <li>
        A working demo is in project 
        <a href="https://github.com/mperdeck/jsnlog.AspNet5Demo" target="_blank">jsnlog.AspNet5Demo</a>
    </li>
</ul>

@*todo:
ensure that when installing from bower, user doesn't get tons of irrelevant files, suich as the .sln file*@

<p>
    JSNLog support for ASP.NET 5 works, but is not fully baked yet:
</p>
<ul class="large-items">
    <li>
        No option yet to configure client side loggers, etc. in your server side configuration.
        However, JSNLog works happily with the default configuration, and you can 
        @Html.ViewLink("jsnlogjs-logger-setOptions", "configure your loggers, etc. in your JavaScript code")<text>.</text>
    </li>
    <li>
Except for this page, documentation on jsnlog.com has not yet been updated.
    </li>
</ul>

<h2>Installation instructions for ASP.NET 5</h2>

<ol>
    <li>
        <b>Install dependencies</b>
        <p>
            JSNLog depends on these packages. However, these are pre-release packages
            and NuGet does not allow stable packages such as JSNLog to specify dependencies on
            pre-release packages. So they have to be installed manually. 
        </p>
        <pre>Install-Package Microsoft.AspNet.Http.Abstractions -Pre
Install-Package Microsoft.AspNet.Http.Extensions -Pre
Install-Package Microsoft.AspNet.Mvc.TagHelpers -Pre
Install-Package Microsoft.Extensions.Logging -Pre</pre>
        <p />
    </li>
    <li>
        <b>Install server side component</b>
        <p>
            Install JSNLog NuGet package:
        </p>
        <pre>Install-Package JSNLog</pre>
        <p />
    </li>
    <li>
        <b>Install client side library</b>
        <p>
            Install jsnlog.js from Bower:
        </p>
        <ul>
            <li>
                In Solution Explorer, expand <span class="term">Dependencies</span> folder;
            </li>
            <li>
                Right click 
                <span class="term">Bower</span>
                | 
                <span class="term">Manage Bower Packages</span>;
            </li>
            <li>
                Click
                <span class="term">Browse</span>
link;
            </li>
            <li>
                Enter
                <span class="term">jsnlog</span>
                in search box;
            </li>
            <li>
                Click 
                <span class="term">Install</span>.
            </li>
        </ul>
        <p />
    </li>
    <li>
        <b>Load jsnlog.js on your pages</b>
        <p>
            Include a script tag, such as this
            (@Html.ViewLink("getstarted-loadingjsfile", "more options")):
        </p>
        <pre>&lt;script src=&quot;~/lib/jsnlog/jsnlog.min.js&quot;&gt;&lt;/script&gt;</pre>
        <p />
    </li>
    <li>
        <b>Configure JSNLog middleware</b>
        <p>
            In your
            <span class="term">startup.cs</span> file,
            add the JSNLog middleware to your ASP.NET 5 application before the Static Files middleware.
        </p>
        <p>
            This short circuits logging requests from the jsnlog.js client side library
            and hands the log data off to your server side loggers.
        </p>
        <pre><span class="addedcode">using JSNLog;</span>
                    
public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
    ...

    <span class="addedcode">// Configure JSNLog
    var jsnlogConfiguration = new JsnlogConfiguration();
    app.UseJSNLog(new LoggingAdapter(loggerFactory), jsnlogConfiguration);</span>

    app.UseStaticFiles();

    ...
}</pre>
        <p />
    </li>
    <li>
        <b>Optional: Configure your client side loggers with server side code</b>
        <p>
            You can configure your client side loggers in your server side code, by
            initializing a
            <span class="term">JsnlogConfiguration</span> object
            (@Html.ViewLink("webconfig-jsnlog", "how"))
            and
            passing
            it
            to the <span class="term">UseJSNLog</span> method as shown in the listing above.
            This way you can use the 
            <a href="https://docs.asp.net/en/latest/fundamentals/configuration.html" target="_blank">ASP.NET 5 Configuration</a>
            features, which are pretty cool.
        </p>
        <p>
            To make this work, JSNLog exposes the
            <span class="term">jl-javascript-logger-definitions</span>
            <a href="https://docs.asp.net/projects/mvc/en/latest/views/tag-helpers/intro.html" target="_blank">tag helper</a>.
            This inserts a JavaScript script block in your HTML that
            configures the loggers.
        </p>
        <p>
            Import the tag helper via your
            <span class="term">_ViewImports.cshtml</span> file:
        </p>
        <p>
            <pre>@@*Add to _ViewImports.cshtml*@@

@@addTagHelper &quot;*, JSNLog&quot;</pre>
        </p>
        <p>
            (The <span class="term">_ViewImports.cshtml</span>
            file lives in your <span class="term">Views</span> directory, next to
            your
            <span class="term">_ViewStart.cshtml</span>
            file)
        </p>
        <p>
            Then insert the tag helper near the top of your pages,
            before any JavaScript. Your <span class="term">_Layout.cshtml</span> file
            would be a great place:
        </p>
        <pre>@@*Add to _Layout.cshtml*@@

&lt;jl-javascript-logger-definitions /&gt;</pre>
        <p>
            Note that this is purely optional. JSNLog works fine out of the box without configuration.
            You can also
            @Html.ViewLink("jsnlogjs-logger-setOptions", "configure your loggers in your JavaScript")<text>.</text>
        </p>
    </li>
    <li>
        <b>@Html.ViewLink("getstartedlogging", "Start logging >>")</b>
    </li>
</ol>


