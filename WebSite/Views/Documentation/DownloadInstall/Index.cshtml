@using ViewExtensions
@using WebSite.App_Code

@{
    ViewBag.Title = "Installation";
    ViewBag.Key = "downloadinstall";
    ViewBag.Description = "How to download and install JSNLog.";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";

    string currentVersion = PageVersions.CurrentVersion();
}

@if (currentVersion == "NetJs")
{

    @*
        --------------------------------------------------------------------------
        If the url or the hash tag of the additional config steps ever changes,
        also change the Nuget readme file
        --------------------------------------------------------------------------
    *@

    @*
        ---------------------------------------------------------
        The hash "additional" is used in the Nuget readme file
        ---------------------------------------------------------
    *@
    <a name="additional"></a>
    <h2>1. Install NuGet package</h2>

    <p>
        These NuGet packages install JSNLog and update your web.config
        so it works with your server side logging package.
        They assume that
        you have already installed a server side logging package.
    </p>

    <table class="table">
        <tr>
            <th>Your ASP.NET version</th>
            <th>Your Logging Package</th>
            <th>Install this package</th>
        </tr>
        <tr>
            <td>ASP.NET 4.x</td>
            <td>Log4Net</td>
            <td><a href="https://www.nuget.org/packages/JSNLog.Log4Net/" target="_blank">Install-Package JSNLog.Log4Net</a></td>
        </tr>
        <tr>
            <td>ASP.NET 4.x</td>
            <td>NLog</td>
            <td><a href="https://www.nuget.org/packages/JSNLog.NLog/" target="_blank">Install-Package JSNLog.NLog</a></td>
        </tr>
        <tr>
            <td>ASP.NET 4.x</td>
            <td>Elmah</td>
            <td><a href="https://www.nuget.org/packages/JSNLog.Elmah/" target="_blank">Install-Package JSNLog.Elmah</a></td>
        </tr>
        <tr>
            <td>ASP.NET 4.x</td>
            <td>Serilog</td>
            <td><a href="https://www.nuget.org/packages/JSNLog.Serilog/" target="_blank">Install-Package JSNLog.Serilog</a></td>
        </tr>
        <tr>
            <td>ASP.NET 4.x</td>
            <td>Common.Logging</td>
            <td><a href="https://www.nuget.org/packages/JSNLog.CommonLogging/" target="_blank">Install-Package&nbsp;JSNLog.CommonLogging</a></td>
        </tr>
        <tr>
            <td>ASP.NET 5</td>
            <td>any</td>
            <td>@Html.ViewLink("downloadinstall-aspnet5",
            "Click here")</td>
        </tr>
    </table>

    <p>
        If your logging package is not listed here, install the version for Common.Logging and
        then install a Common.Logging
        <a href="http://www.nuget.org/packages?q=Common.Logging">adapter for your logging package</a>.
    </p>
    <p>
        
    </p>


    @*
    ---------------------------------------------------------
    The hash "serilog" is used in the Nuget readme file for the Nuget package for Serilog
    ---------------------------------------------------------
    *@
    <a name="serilog"></a>
    <h2>2. Serilog only</h2>
    <p>
        If you do not use Serilog, <a href="#addtoyourpages">skip this step</a>.
    </p>
    <p>
        This package assumes that you have created a
        <a href="https://github.com/serilog/serilog/wiki/Getting-Started" target="_blank">global logger</a>.
        For example:
    </p>
<pre>
var log = new LoggerConfiguration()
    .WriteTo.File("log.txt")
    .CreateLogger();<br />
// Set global logger, so JSNLog can access it.
Log.Logger = log;
</pre>
    <p>
        A good place for this would be the <span class="term">Application_Start</span>
        handler in your <span class="term">Global.asax.cs</span>.
    </p>

    @*
        ---------------------------------------------------------
        The hash "addtoyourpages" is used in the Nuget readme file
        ---------------------------------------------------------
    *@

    <a name="addtoyourpages"></a>
    <h2>3. Add JSNLog to your pages</h2>

    <p>
        Call JSNLog's
        @Html.ViewLink("javascriptlogging-configure", "Configure")
        method in your pages, before any script tags that load JavaScript
        that use JSNLog loggers.
        This generates a script tag that loads the jsnlog.min.js JavaScript library
        (@Html.ViewLink("getstarted-loadingjsfile", "how to stop this", fragment: "stopscripttaggeneration")).

</p>
    @Html.Partial("_CallingConfigure")

    <p>
        @Html.ViewLink("webconfig", 
            "Take these steps if you cannot call Configure",
            fragment: "cannotcallconfigure"),
        for example if your pages are flat files that are not generated by MVC or WebForms.
    </p>

        <h2>4. OWIN only</h2>

    <a  data-toggle="collapse" href="#collapseExample" aria-expanded="false" aria-controls="collapseExample">Click here if you use OWIN</a>
    <div class="collapse" id="collapseExample">

        <p style="margin-top: 10px;">
            A working demo is in project
            <a href="https://github.com/mperdeck/jsnlogSimpleWorkingDemos" target="_blank">EmptyLog4Net - OWIN</a>
        </p>
        <ol>
            <li>
                <a id="owin-addtopipeline"></a>
                <b>Add JSNLog to your OWIN pipeline</b> in your Startup class:
                <p />
                <pre style="margin-bottom: 10px;"><span class="addedcode">using JSNLog;</span><br/>
public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        ...
        <span class="addedcode">app.UseJSNLog();</span>
        ...
    }
}</pre>
            </li>
            <li>
                <b>Update your web.config</b> -
                Remove the definitions that make JSNLog work as an HTTP Handler, and add a definition
                that sends
                all log requests to the OWIN handler:
                <p />
                <pre>&lt;configuration&gt;
    &lt;system.web&gt;
    &lt;httpHandlers&gt;
        ...
        &lt;!-- Remove this line --&gt;
        <del>&lt;add verb="*" path="*@SiteConstants.HandlerExtension" type="JSNLog.LoggerHandler, JSNLog" /&gt;</del>
    &lt;/httpHandlers&gt;
    &lt;/system.web&gt;
    &lt;system.webServer&gt;
    &lt;handlers&gt;
        ...
        &lt;!-- Remove these lines --&gt;
        <del>&lt;add name="LoggerHandler" verb="*" path="*@SiteConstants.HandlerExtension" type="JSNLog.LoggerHandler, JSNLog" resourceType="Unspecified" preCondition="integratedMode" /&gt;</del>
        <del>&lt;add name="LoggerHandler-Classic" path="*@SiteConstants.HandlerExtension" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode" /&gt;</del>
        &lt;!-- 
        Add this line. 
        If you configure JSNLog to send log request to a url that 
        does NOT end in @SiteConstants.HandlerExtension (@Html.ViewLink("getstarted-cors", "how")), change the path attribute below.
        --&gt;
        <span class="addedcode">&lt;add name="Owin" verb="" path="*@SiteConstants.HandlerExtension" 
             type="Microsoft.Owin.Host.SystemWeb.OwinHttpHandler, Microsoft.Owin.Host.SystemWeb"/&gt;</span>
    &lt;/handlers&gt;
    &lt;/system.webServer&gt;
&lt;/configuration&gt;</pre>
                <p />
            </li>

        </ol>

    </div>








    <a name="feedback"></a>
    <h2>5. Feedback</h2>
    <p>
        Any praise, constructive criticism or ideas for improvement are welcome. Please leave it
        <a href="https://github.com/mperdeck/jsnlog/issues?state=open">here</a>.
    </p>
    <p>
        <h2>
            6. @Html.ViewLink("getstartedlogging", "Start logging >>")
        </h2>
    </p>
}

    @*====================================================================================================*@
    @* JS Only *@
    @*====================================================================================================*@

    @if (currentVersion == "JsOnly")
    {
        <p>
            @{
        Uri url = HttpContext.Current.Request.Url;
        string netJsUrl = PageVersions.UrlWithVersionUrlName(url, "netjs");
            }

            <small>If you use .Net, <a href="@netJsUrl">click here</a>.</small>
        </p>

        <p>
            Firstly, <a href="@SiteConstants.DownloadLinkJsnlogJs" target="_blank">download jsnlog.js</a> and add it to your site.
        </p>

        <p>
            The second step is to let your server receive log messages from jsnlog.js. Two things are in play here:
        </p>
        <ol>
            <li>The URL where you will receive log messages;</li>
            <li>The format of the log messages.</li>
        </ol>

        <h2>URL where you will receive log messages</h2>

        <p>
            The built in AJAX appender by default sends all log messages to this url:
        </p>
        <pre>@SiteConstants.DefaultDefaultAjaxUrl</pre>

        <p>
            You can change this using the
            <span class="term">defaultAjaxUrl</span>
            field in the
            JL
            @Html.ViewLink("jsnlogjs-jl-setOptions")<text>.</text>
        </p>

        <a id="formatlogmessages"></a><h2>Format of the log messages</h2>
        <p>
            The AJAX appender sends log requests with:
        </p>
        <ul>
            <li>
                A JSON string containing most of the log data;
            </li>
            <li>
                A <a href="#requestheader">request header @SiteConstants.HttpHeaderRequestIdName containing the request id</a>.
            </li>
        </ul>

        <h3>JSON string</h3>
        <p>
            The JSON string has this format:
        </p>

        <pre>{
    r:  "request id", // Obsolete. May be empty string.
    lg: [
        { l: level, m: 'message', n: 'logger name', t: timestamp },
        ...
    ]
}</pre>

        <p>
            Please note that a single JSON message to the server can contain multiple log messages.
            This is because the AJAX appender can be configured
            to batch messages, for example 2 log messages per JSON message to the server.
        </p>
        <p>
            About the individual fields:
        </p>
        <table class="table medium">
            <tr valign="top">
                <th>Field</th>
                <th>Description</th>
            </tr>
            <tr>
                <td valign="top">
                    request id
                </td>
                <td>
                    Identifies the current request.
                    <p />
                    This is a simple copy of the request id in
                    the <a href="#requestheader">@SiteConstants.HttpHeaderRequestIdName request header</a>.
                    <p />
                    You can set this on the server while generating the page using the JL
                    @Html.ViewLink("jsnlogjs-jl-setOptions")<text>.</text>
                    <p />
                    Use this feature to see which log message belong to the same request.
                    This feauture is optional, so no need to worry about it.
                </td>
            </tr>
            <tr>
                <td valign="top">
                    level
                </td>
                <td>
                    @Html.ViewLink("getstarted-numericseverities", "Numeric severity")
                    of the log message.
                </td>
            </tr>
            <tr>
                <td valign="top">
                    message
                </td>
                <td>
                    Message to be logged.
                </td>
            </tr>
            <tr>
                <td valign="top">
                    logger&nbsp;name
                </td>
                <td>
                    Name of the logger.
                </td>
            </tr>
            <tr>
                <td valign="top">
                    timestamp
                </td>
                <td>
                    The time the message was logged by your JavaScript.
                    This is the number of milliseconds since 1 January 1970 00:00:00 UTC, according to the client machine's clock.
                </td>
            </tr>
        </table>

        <a id="requestheader"></a>
        <h3>@SiteConstants.HttpHeaderRequestIdName request header with request id</h3>

        <p>
            The request id is used to identify all log requests that were generated by the same user.
            To use this facility, set the request id in your JavaScript after the page has loaded to some unique string, using
            the JL
            @Html.ViewLink("jsnlogjs-jl-setOptions")<text>.</text>
        </p>
        <p>
            The jsnlog.js library then includes that request id in all log requests.
        </p>
        <p>
            If you don't set the request id, jsnlog.js uses the empty string.
        </p>
        <p>
            The request id is sent in a custom HTTP request header, @SiteConstants.HttpHeaderRequestIdName. This way,
            server side code can easily determine whether a request is a log request from jsnlog.js, or some other request (such as a simple page request).
        </p>
    }

    @*====================================================================================================*@
        @* NodeJs *@
        @*====================================================================================================*@

        @if (currentVersion == "NodeJs")
        {
            <p>
                <a href="https://github.com/mperdeck/jsnlog.NodeJsWorkingDemos" target="_blank">Working sample code</a>
            </p>

            <h2>Logging server side</h2>
    <ol>
        <li>
            Install jsnlog.js from NPM:
            <pre>npm install jsnlog</pre>
        </li>
        <li>
            Load jsnlog into your code:
            <pre>var JL = require('jsnlog').JL;</pre>
        </li>
        <li>
            By default, jsnlog.js logs to the console. To make it easy to log to a database or a logging service,
            you can use
            <a href="https://github.com/flatiron/winston#working-with-transports" target="_blank">Winston transports</a>
            as well
            (@Html.ViewLink("getstarted-loggingtodb", "see how")).
        </li>
    </ol>

            <p>
                If you will only be logging from a NodeJs program, that's the installation done.
                Head on to the @Html.ViewLink("getstartedlogging")
                page.
            </p>
            <p>
                If you have a web site, you'll want to log exceptions and other interesting events in the client
                and store the log messages on the server. Continue on.
            </p>

            <h2>Logging client side</h2>
            <p>
                Two things
                need to be done:
            </p>
            <ul>
                <li>Load jsnlog.js on the client. This will send log messages via AJAX to the server.</li>
                <li>
                    Receive the log messages on the server and log them server side.
                </li>
            </ul>

            <h3>Load jsnlog.js on the client</h3>
            <p>
You have these options to load jsnlog.js on the client:
            </p>
            <ol class="large-items">
                <li>
          With a simple script tag. If necessary, copy jsnlog.js from the
                    <span class="term">node_modules/jsnlog</span> directory
                    to the directory where you keep your client side JavaScript files.
                </li>
                <li>
As an AMD module (@Html.ViewLink("getstarted-loadingjsfile-nodejs", "how", fragment: "amd")).                    
                </li>
                <li>
                    As part of a combined JavaScript file generated by Browserify 
                    (@Html.ViewLink("getstarted-loadingjsfile-nodejs", "how", fragment: "browserify")).
                </li>
            </ol>
            <p>
                Note that the same jsnlog.min.js file happily works on both the client and server.
                On the client, by default it automatically sends log messages via AJAX to the server.
                On the server, by default it sends log messages to the console.
            </p>

            <h3>Receive and store log messages on the server</h3>
            <p>
                The jsnlog.js running on the client by default sends log messages to:
            </p>
            <pre>@SiteConstants.DefaultDefaultAjaxUrl</pre>

            <p>
                (@Html.ViewLink("jsnlogjs-jl-setOptions", "how to change", fragment: "defaultAjaxUrl"))
            </p>
            <p>
                These log messages are POSTs, and the log messages sit in the body as
                a JSON object. You will want to receive those messages on the server, and pass them on to
                the server side jsnlog.js, for server side logging.
            </p>

            <p>
                To make this easier, the <span class="term">jsnlog-nodejs</span> package
                exposes a function that takes the JSON object and logs all the messages:
            </p>

            <pre>npm install jsnlog-nodejs</pre>

            <pre>var JL = require('jsnlog').JL;
var jsnlog_nodejs = require('jsnlog-nodejs').jsnlog_nodejs;<br />
// Read JSON object from message body
var jsonBody = ....;<br />
// Pass the log messages to the server side jsnlog.js
jsnlog_nodejs(JL, jsonBody);
</pre>
            <p>
                For example, if you use
                <a href="http://expressjs.com/" target="_blank">Express</a>, you could
                add a route to receive the log messages:
            </p>
            <pre>npm install express
npm install body-parser
</pre>

            <pre>
var express = require('express');
var bodyParser = require('body-parser'); 
var app = express();<br />
// Ensure that the JSON objects received from the client get parsed correctly.
app.use(bodyParser.json())<br />
// jsnlog.js on the client by default sends log messages to @SiteConstants.DefaultDefaultAjaxUrl, using POST.
app.post('*.logger', function (req, res) { 
    jsnlog_nodejs(JL, req.body);<br />
    // Send empty response. This is ok, because client side jsnlog does not use response from server.
    res.send(''); 
});
</pre>

            <p>
                Now that the installation is done, 
                visit the @Html.ViewLink("getstartedlogging")
                page.
            </p>
        }
