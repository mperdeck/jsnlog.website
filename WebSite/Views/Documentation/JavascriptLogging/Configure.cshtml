@using ViewExtensions

@{
    ViewBag.Title = "Configure Method";
    ViewBag.Key = "javascriptlogging-configure";
    ViewBag.Description = "Generates JavaScript code to configure JavaScript loggers and appenders.";
    ViewBag.VersionNameRegex = "NetJs";
}

@section Definition {
<pre>public static string Configure(string requestId = null)</pre>

<section class="parameters">
<h3>Parameters</h3>

        <table class="table medium no-borders">
        <tr>
            <th>requestId</th>
            <td>Request id to include in log messages sent by JSNLog to the server. See remarks.</td>
        </tr>
    </table>

<h3>Return Value</h3>
<p>
Script blocks that configure your JavaScript loggers and appenders.
</p>
</section>
}


@section Remarks {
    <p>
<p>
    As part of the
    @Html.ViewLink("downloadinstall", "installation", null, "addtoyourpages")<text>,</text>
    you will have included a call to this
    method in your pages
    (@Html.ViewLink("webconfig",
            "exceptions",
            fragment: "cannotcallconfigure")).
</p>
<p>
    This method translates the server side configuration to JavaScript code that
    configures the client side loggers and appenders
    (@Html.ViewLink("webconfig", "details", null, "clientsideconfigonserver")).
</p>

    <h3>requestId</h3>
    <p>
        JSNLog generates a request id that is unique to each request, and sends that with all log messages to the server.
        That makes it easier to find out which log messages relate to the same request. See the remarks section of the
        @Html.ViewLink("javascriptlogging-requestid")<text>.</text>
    </p>
    <p>
        If however you generate your own request ids and you want JSNLog to use that instead,
        pass in your request id via the 
        <span class="term">requestId</span> parameter.
    </p>

}



