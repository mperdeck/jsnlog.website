@using ViewExtensions

@{
    ViewBag.Title = "RequestId Method";
    ViewBag.Key = "javascriptlogging-requestid";
    ViewBag.Description = "Returns the current request id.";
    ViewBag.VersionNameRegex = "NetJs";
}

@section Definition {
<pre>public static string RequestId()</pre>

    <section class="parameters">
        <h3>Return Value</h3>
        <p>
            A string unique to the current web request.
            If the current request is a log request from the jsnlog.js library,
            the request id in the log request is returned instead.
        </p>
    </section>
}


@section Remarks {
    <p>
        This method
        first checks whether the current request is a log request from the jsnlog.js library.
        If it is, it returns the request id contained in the log request.
        Otherwise, it
        generates a string that is unique to the request that is currently being processed.
    </p>
    <p>
        Each time you call this method within the same request, you will get the same string.
    </p>
    <p>
        By including this string in your server side log entries, you can track which log entries belong to the same request.
    </p>
    <p>
        Note that if you call the
        @Html.ViewLink("javascriptlogging-configure")
        with your own request id, that doesn't mean the <span class="term">RequestId</span> method than returns your request id.
        <span class="term">RequestId</span>
        always returns a request id generated internally by JSNLog.
    </p>

    <h3>Showing the request id in your logs</h3>
    <p>
        The easiest way to include request ids in your log is to
        @Html.ViewLink("getstarted-requestids", "configure Log4Net or NLog")
        to do this.
    </p>
    <p>
        Alternatively, you can include the request id in the log messages generated by JSNLog by including the
        <span class="term">%requestId</span>
        place holder in
        the
        <span class="term">serverSideMessageFormat</span>
        attribute
        of the
        @Html.ViewLink("webconfig-jsnlog")<text> configuration element.</text>
    </p>

    <p>
        To include the request id in your server side log messages, you would then call
        <span class="term">RequestId</span>
        and prepend the request id to the start of the message.
    </p>
    <p>
        If you add the request id and a timestamp to the front of the log message, you can easily track which messages
        were sent for which request and in what order by sorting your log messages. See the
        <span class="term">%dateServer</span>
        place holder in
        the
        <span class="term">serverSideMessageFormat</span>
        attribute
        of the
        @Html.ViewLink("webconfig-jsnlog")<text> configuration element.</text>
    </p>


    <h3>How the request id is generated</h3>
    <p>
        JSNLog uses the same request id that is used internally by IIS. This way, you can correlate with
        tracing done using
        <a href="http://www.iis.net/configreference/system.webserver/httptracing" target="_blank">Event Tracing for Windows (ETW)</a>.
    </p>
    <p>
        If you do not have ETW tracing switched on, JSNLog generates a random GUID.
    </p>
    <p>
        When a page is generated, JSNLog inserts some JavaScript on the page that contains the request id.
        The jsnlog.js library reads the request id and sends it with every log request. 
    </p>

}


