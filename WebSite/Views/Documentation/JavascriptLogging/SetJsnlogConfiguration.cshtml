@using ViewExtensions

@{
    ViewBag.Title = "SetJsnlogConfiguration Method";
    ViewBag.Key = "javascriptlogging-setjsnlogconfiguration";
    ViewBag.Description = "Lets you configure JSNLog in code.";
    ViewBag.VersionNameRegex = "NetJs";
}

@section Definition {
<pre>public static void SetJsnlogConfiguration(JsnlogConfiguration jsnlogConfiguration)</pre>

<section class="parameters">
    <h3>Parameters</h3>

    <table class="table medium no-borders">
        <tr>
            <th>jsnlogConfiguration</th>
            <td>Configuration object. See remarks.</td>
        </tr>
    </table>
</section>
}

@section Remarks {
    <ul>
        <li>
            A working demo is in project 
            <a href="https://github.com/mperdeck/jsnlogSimpleWorkingDemos" target="_blank">EmptyLog4Net - ConfigurationInCode</a>
        </li>
    </ul>

    <p>
        This method allows you to configure JSNLog in code.
        It takes a parameter of type @Html.ViewLink("webconfig-jsnlog", "JsnlogConfiguration") which holds all the configuration settings you want to apply.
    </p>

    <p>
    This page only shows how to call <span class="term">SetJsnlogConfiguration</span>.
</p>
<ul>
    <li>
        @Html.ViewLink("webconfig-jsnlog", "Definition of JsnlogConfiguration")
    </li>
    <li>
        @Html.ViewLink("webconfig", "More about configuring JSNLog")
    </li>
    </ul>

<h2>Calling SetJsnlogConfiguration</h2>
    <p>
        To avoid confusion, JSNLog does not allow you to 
configure JSNLog both in code and in your web.config. If you introduce a call to
        <span class="term">SetJsnlogConfiguration</span> in your code,
        remove the
        @Html.ViewLink("webconfig-jsnlog", "<jsnlog>")
        element from your web.config if you have one.
    </p>

    <p>
    You would call <span class="term">SetJsnlogConfiguration</span> at the start of each request:
</p>
<ul class="large-items">
    <li>
        <b>If you use OWIN</b>, in the
        @Html.ViewLink("getstarted-owin", "Configuration method in your Startup class")<text>.</text>
    </li>
    <li>
<b>Otherwise</b>,
        in the <span class="term">Application_BeginRequest</span> event handler in your
        <span class="term">Global.asax.cs</span> file as shown below.
    </li>

    </ul>

    <pre>// Global.asax.cs
// 
// Simple example configuration in code
    
<span class="addedcode">using JSNLog;</span>

public class MvcApplication : System.Web.HttpApplication
{
    protected void Application_BeginRequest()
    {
        <span class="addedcode">JavascriptLogging.SetJsnlogConfiguration(new JsnlogConfiguration
        {
            serverSideMessageFormat = "%logger, %level, %message",
            loggers = new List&lt;Logger&gt;
            {
                new Logger 
                {
                    name = "jsLogger",
                    level = "FATAL"
                }
            }
        });</span>
    }
}</pre>

}


