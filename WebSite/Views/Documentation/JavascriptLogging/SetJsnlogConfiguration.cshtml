@using ViewExtensions

@{
    ViewBag.Title = "SetJsnlogConfiguration Method";
    ViewBag.Key = "javascriptlogging-setjsnlogconfiguration";
    ViewBag.Description = "Lets you configure JSNLog in code.";
    ViewBag.VersionNameRegex = "NetJs";
}

@section Definition {
<pre>public static void SetJsnlogConfiguration(
    JsnlogConfiguration jsnlogConfiguration, ILoggingAdapter loggingAdapter = null)</pre>

<section class="parameters">
    <h3>Parameters</h3>

    <table class="table medium no-borders">
        <tr>
            <th>jsnlogConfiguration</th>
            <td>Configuration object. See remarks.</td>
        </tr>
        <tr>
            <th>loggingAdapter</th>
            <td>Optional. Adapter to the server side logging package. See remarks.</td>
        </tr>
    </table>
</section>
}

@section Remarks {
    <ul>
        <li>
            A working demo is in project 
            <a href="https://github.com/mperdeck/jsnlogSimpleWorkingDemos" target="_blank">EmptyLog4Net - ConfigurationInCode</a>
        </li>
    </ul>

    <h3>jsnlogConfiguration</h3>
<p>
    By default, JSNLog tries to get its configuration from your web.config file. If there is no such file or if it does not have
    an &lt;jsnlog&gt; element, it uses its default configuration (which works fine in most cases).
    </p>

    <p>
However, you may want to configure JSNLog using code instead.
        To do this, 
        pass a
        @Html.ViewLink("webconfig-jsnlog", "JsnlogConfiguration")
        object with your configuration settings to
        this method.
    </p>
<p>
    To switch JSNLog back to the default situation,  
    pass <span class="term">null</span>
    to the
    <span class="term">jsnlogConfiguration</span>
    parameter.
    </p>

<ul>
    <li>
        @Html.ViewLink("webconfig", "More about configuring JSNLog")
    </li>
</ul>
<p>
    To avoid confusion, JSNLog does not allow you to
    use both code based configuration and web.config based configuration.
    If you want to use code based configuration, remove the
    @Html.ViewLink("webconfig-jsnlog", "<jsnlog>")
element from your web.config (if you have one).
</p>

<h3>loggingAdapter</h3>

    <p>
        When JSNLog receives a log request from the client, it needs to pass on the log information
        to your server side logging package.
    </p>
    <p>
        By default, it does this by calling 
        a <a href="http://netcommon.sourceforge.net/" target="_blank">Common.Logging</a>
        interface. The <span class="term">Common.Logging</span> package in turn looks at your web.config
        to determine which server side logging package to talk to (such as Log4Net, NLog, etc.)
    </p>
<p>
    You can override this behaviour by setting your own
    adapter to the server side logging package.
    This allows you to use an alternative logging abstraction such as
    <a href="https://github.com/damianh/LibLog" target="_blank">LibLog</a>,
    or
    <a href="http://nblumhardt.com/2015/05/diagnostic-logging-in-dnx-asp-net-5/" target="_blank">ASP.NET 5's logging framework</a>.
    </p>

    <p>
        To make this happen, create a class implementing <span class="term">ILoggingAdapter</span>.
        Then call <span class="term">SetJsnlogConfiguration</span>
        with an object of that class
        to replace JSNLog's default
        adapter.
    </p>
    <p>
        If you pass in <span class="term">null</span>
        to the 
        <span class="term">loggingAdapter</span>
        parameter,
        the current adapter is not changed.
    </p>

<h3>ILoggingAdapter</h3>

    <p>
        Implementing 
        <span class="term">ILoggingAdapter</span>
        should not be hard        
        (<a href="https://github.com/mperdeck/jsnlog/blob/master/JSNLog/LogHandling/CommonLoggingAdapter.cs" target="_blank">example</a>):
    </p>

    <pre>public interface ILoggingAdapter
{
    void Log(FinalLogData finalLogData);
}</pre>

    <p>
        Your new <span class="term">Log</span>
        method takes a
        @Html.ViewLink("javascriptlogging-onlogging", "FinalLogData", fragment: "LoggingEventArgs")
        object and logs its content on the server, in whatever way you see fit.
    </p>

<h2>Calling SetJsnlogConfiguration</h2>

    <p>
    You would call <span class="term">SetJsnlogConfiguration</span> at the start of each request:
</p>
<ul class="large-items">
    <li>
        <b>If you use OWIN</b>, in the
        @Html.ViewLink("getstarted-owin", "Configuration method in your Startup class")<text>.</text>
    </li>
    <li>
<b>Otherwise</b>,
        in the <span class="term">Application_BeginRequest</span> event handler in your
        <span class="term">Global.asax.cs</span> file as shown below.
    </li>

    </ul>

    <pre>// Global.asax.cs
// 
// Simple example configuration in code
    
<span class="addedcode">using JSNLog;</span>

public class MvcApplication : System.Web.HttpApplication
{
    protected void Application_BeginRequest()
    {
        <span class="addedcode">JavascriptLogging.SetJsnlogConfiguration(new JsnlogConfiguration
        {
            serverSideMessageFormat = "%logger, %level, %message",
            loggers = new List&lt;Logger&gt;
            {
                new Logger 
                {
                    name = "jsLogger",
                    level = "FATAL"
                }
            }
        });</span>
    }
}</pre>

}


