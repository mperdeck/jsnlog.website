@using ViewExtensions

@{
    ViewBag.Title = "Exception Object";
    ViewBag.Key = "jsnlogjs-exception";
    ViewBag.Description = "Allows you to create custom exceptions that hold a JSON object and an inner exception.";
}

@section Definition {
<pre>new JL.Exception(data: any, public inner?: any)</pre>

<section class="parameters">
    <h3>Parameters</h3>

    <table class="table medium no-borders">
        <tr>
            <th>data</th>
            <td>String or object to be stored in the exception, or a function that returns the string or object to be stored in the exception.</td>
        </tr>
        <tr>
            <th>inner</th>
            <td>Exception to be stored inside this exception.</td>
        </tr>
    </table>
</section>
}

@section Remarks {
    <ul>
        <li>
            @Html.ViewLink("getstarted-trycatch", "JavaScript Try Catch examples, including the use of the Exception object")
        </li>
    </ul>

    <p>
The JSNLog <span class="term">Exception</span> object
        is a more powerful version of 
JavaScript's
        <span class="term">Error</span> object. 
        For comparison sake, the
        <span class="term">Error</span>
        object looks like this:
    </p>
<pre>new Error(message?: string)</pre>

<p>
The
    <span class="term">Exception</span> object 
    differs from the 
    <span class="term">Error</span> object
    in these ways:
    </p>
<ul>
    <li>
        Unlike the <span class="term">Error</span> object's 
        <span class="term">message</span>
         parameter, the 
        <span class="term">Exception</span> object's
        <span class="term">data</span>
         parameter 
        can take not only strings, but also JSON objects and functions. If you pass in a function, it will be executed. 
        The function's return value will be used as the value of the exception.
    </li>
    <li>
You can store an inner exception, as shown in
        @Html.ViewLink("getstarted-trycatch", "this example", fragment: "innerexception").
    </li>
    </ul>
}

@section Examples {
    <p>
        Simple try-catch, using console log to write the exception message to the console:
    </p>
<pre>try {
    // Exception value is an object
    throw new JL.Exception({ "i": 1, "j": 2 });
} catch (e) {
    // Logs the message:
    // Uncaught JL.Exception: {"i":1,"j":2}
    console.log(e.message);
}</pre>
}
