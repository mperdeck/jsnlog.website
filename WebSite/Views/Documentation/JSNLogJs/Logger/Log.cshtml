@using ViewExtensions
@{
    ViewBag.Title = "log Method";
    ViewBag.Key = "jsnlogjs-logger-log";
    ViewBag.Description = "Creates a log item";
}


@section Definition {
<pre>log(level: number, logObject: any): Logger</pre>

<section class="parameters">
<h3>Parameters</h3>

    <table class="table medium no-borders">
        <tr>
            <th>level</th>
            <td>@Html.ViewLink("getstarted-numericseverities", "Numeric severity") of the message to be logged.</td>
        </tr>
        <tr>
            <th>logObject</th>
            <td>String or object to be logged, or a function that returns the string or object to be logged. See remarks.</td>
        </tr>
    </table>
    
<h3>Return Value</h3>
<p>
The Logger itself.
</p>
</section>
}

@section Remarks {
    <p>
        You are not restricted to simply logging strings. 
        You can log objects, arrays, dates, numbers, booleans and even regular expressions. These 
        are all converted to a string before being logged.
    </p>
    <p>
        If producing the log information is expensive, than you will only want to do this
        if the information will actually be logged - that is, the severity of the logged information
        exceeds the logger's level, etc.
    </p>
    <p>
        To solve this, you can pass in a function rather than the information itself. This function
        has to return the information. It will only be called if the log information will actually be logged.
    </p>
    <p>
        You can even have the function return another function that returns the actual information - or 
        another function, etc. Do make sure there are no circular references in this chain, otherwise
        you will get a stack overflow.
    </p>
}

@section Examples {
<p>
    This creates a log message &quot;log message&quot; with severity 2500.
</p>

<pre>JL().log(2500, "log message");</pre>

<p>
    This logs an object.
</p>

<pre>var obj = {"f1": "v1", "f2": "v2"};
JL().log(2500, obj);</pre>

<p>
    This passes in a function that produces the log information.
    The function is only called if the log information will actually be logged.
</p>

<pre>JL().log(2500, function() { return "log message"; });</pre>

}


