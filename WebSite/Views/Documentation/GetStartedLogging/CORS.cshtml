@using WebSite.App_Code
@using ViewExtensions

@{
    ViewBag.Title = "Sending log requests to a non default URL (CORS)";
    ViewBag.H1 = "Sending log requests to a non default URL";
    ViewBag.Key = "getstarted-cors";
    ViewBag.Description = "Correlating JavaScript and server side log messages with request ids.";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

<p>
    By default, the jsnlog.js library sends all log requests to the URL
    <i>@SiteConstants.DefaultDefaultAjaxUrl</i><text>.</text>
</p>
<p>
    To send all log requests to another URL, the following needs to be done:
</p>
<ol>
    <li>
Configure jsnlog.js so it sends to the new url.
    </li>
    <li>
Check the handlers in your web.config.
    </li>
    <li>
If you use OWIN, check its configuration.
    </li>
    <li>
        If needed, allow cross domain requests.
    </li>
</ol>

<h3>1. Configure jsnlog.js</h3>

<p>
To change the default URL 
 that log requests are sent to:
</p>
<ul class="large-items">
    <li>
        <b>In your web.config</b>
        -
        set the <i>defaultAjaxUrl</i> attribute of the 
    @Html.ViewLink("webconfig-jsnlog", "jsnlog element")<text>.</text>
    </li>
    <li>
        <b>Or in JavaScript</b>
-
        set the <i>defaultAjaxUrl</i> option of the 
    @Html.ViewLink("jsnlogjs-jl-setOptions", "global JL object")<text>.</text>
    </li>
</ul>

<p>
You can further override the default for each Ajax Appender<text>:</text>
</p>
<ul class="large-items">
    <li>
        <b>In your web.config</b>
        -
        set the <i>url</i> attribute of the 
    @Html.ViewLink("webconfig-ajaxappender")<text>.</text>
    </li>
    <li>
        <b>Or in JavaScript</b>
        -
        set the <i>url</i> option of the 
    @Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "AJAX appender")<text>.</text>
    </li>
</ul>

<h3>2. Check web.config</h3>
<p>
                    Check the 
                handlers in the 
                &lt;system.web&gt; and/or
                &lt;system.webServer&gt;
                sections of your web.config file. 
                These contain a wildcard matching the url of log requests.
</p>

<h3>3. Check OWIN configuration</h3>
    <p>
        If you do not use OWIN, skip this step.
    </p>
<p>
                    If your new url does not end in <span class="term">@SiteConstants.HandlerExtension</span>,
                pass in a regular expression matching your new url
                when calling <span class="term">UseJSNLog</span>
                in your
                <span class="term">Startup</span>
                class
                (@Html.ViewLink("getstarted-owin", "details", fragment: "owin-addtopipeline")).

</p>

<h3>4. Allow cross domain requests</h3>

<p>
    You may want to send your log requests to a site with a domain that is different from the site
    where they originate. For example,
    you have multiple sites with their own domains, 
    and you want all log messages to go to a single common URL.
</p>
    An issue is that by default, browsers do not allow JavaScript (such as jsnlog.js) to 
    send AJAX requests to a domain different from the site domain.
</p>
<p>
    To make cross domain requests possible,
    JSNLog 
    implements 
    the <a href="http://www.w3.org/TR/cors/" target="_blank">CORS</a> protocol.
</p>
<p>
For security reasons, you have to explicitly nominate
the domains that JSNLog should accept requests from. All other domains will still be blocked.
</p>
<p>
To do this,
    set the <i>corsAllowedOriginsRegex</i> attribute of the
    @Html.ViewLink("webconfig-jsnlog", "jsnlog element")
    in your web.config file to a 
    <a href="http://www.regular-expressions.info/tutorial.html" target="_blank">regular expression</a>
    that matches
    all accepted domains
    (<a href="https://regex101.com/" target="_blank">test your regular expression</a>).
</p>

<p>For example, this <i>jsnlog</i> element allows requests from 
    <i>my-abc-domain.com</i>,
    <i>my-xyz-domain.com</i>
    and all their sub domains, both over http and https:
</p>
<pre>
&lt;jsnlog corsAllowedOriginsRegex="^https?:\/\/([a-z0-9]+[.])*(my-abc-domain[.]com|my-xyz-domain[.]com)$"&gt;
    ...
&lt;/jsnlog&gt;
</pre>


<p>
    For a working example, see the 
    <i>EmptyLog4Net - CORS</i>
    project in the
    <a href="https://github.com/mperdeck/jsnlogSimpleWorkingDemos" target="_blank">simple working demos solution</a>
    on GitHub.
</p>


<h4>CORS, Request Ids, and IE8/9</h4>
<p>
    If you use both cross domain log requests
    and  
                @Html.ViewLink("getstarted-requestids", "Request Ids")<text>,</text>
    you will not receive request ids from IE8 and IE9
    (<a href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers" target="_blank">usage share</a>).
</p>
<p>
    This is because CORS is implemented on IE8 and IE9 with the Microsoft specific
    <a href="https://msdn.microsoft.com/en-us/library/ie/cc288060(v=vs.85).aspx" target="_blank">XDomainRequest</a>,
    which
    <a href="http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx" target="_blank">does 
        not allow custom request headers</a> - and request ids are sent using a request header.
</p>
<p>
    <a href="https://msdn.microsoft.com/en-us/library/ie/hh872883(v=vs.85).aspx" target="_blank">IE10 and later</a>
    are standards compliant by adding CORS support to     
    <a href="https://msdn.microsoft.com/en-us/library/ie/hh772834(v=vs.85).aspx" target="_blank">XMLHTTPRequest</a>, 
    which does allow custom request headers.
</p>
<p>
    It may be possible to fix this issue in JSNLog. However, this has little priority seeing the age and dwindling usage share of IE8 and IE9.
</p>











