@using WebSite.App_Code
@using ViewExtensions

@{
    ViewBag.Title = "Sending log requests to a specific URL";
    ViewBag.H1 = "Sending log requests to a specific URL";
    ViewBag.Key = "getstarted-cors";
    ViewBag.Description = "Correlating JavaScript and server side log messages with request ids.";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

<p>
    By default, the jsnlog.js library sends all log requests to the URL
    <i>@SiteConstants.DefaultDefaultAjaxUrl</i><text>.</text>
</p>
<p>
    This will work for you in by far the most cases. 
    However, there may be situations where you want to change this. This page shows you how.
</p>

<h3>How to change the URL where log requests are sent to</h3>
<p>
To change the default URL, 
    set the <i>defaultAjaxUrl</i> attribute of the 
    @Html.ViewLink("webconfig-jsnlog", "jsnlog element")
    in your web.config file.
</p>

<p>
You can further override the default for each 
    @Html.ViewLink("webconfig-ajaxappender", "Ajax Appender")<text>,</text>
with the <i>url</i> attribute.
</p>
<p>
    The following sections are about a few things to keep in mind when
    setting your own URL.
</p>

<h3>Invoking the JSNLog handler</h3>

<p>
    Log requests are processed by the JSNLog 
    <a href="https://msdn.microsoft.com/en-us/library/bb398986(v=vs.140).aspx" target="_blank">HTTP handler</a>. 
    This receives all log requests and passes the log data
    on to your server side logging package. The JSNLog handler was installed by the 
    <a href="http://www.nuget.org/packages/JSNLog/" target="_blank">JSNLog NuGet package</a>.
</p>

<p>
    If you have a look in your web.config, you'll 
    find that the JSNLog handler has been defined  to handle all requests
    with a url  ending in 
    <i>@SiteConstants.HandlerExtension</i>.
</p>
<p>
This means that
    if you want to give your URL another extension,
    you need to change the handler definitions in your web.config as well.
</p>

<h3>Sending log requests to a different domain</h3>

        <p>
            When setting
                @Html.ViewLink("webconfig-jsnlog", "defaultAjaxUrl on the jsnlog element")
            or the 
                @Html.ViewLink("webconfig-ajaxappender", "url attribute on an AjaxAppender")<text>,</text>
        you can use a url with a domain different from the domain you use for your site.
        For example, your site is on <i>xyz-domain.com</i>, but you want to send log entries to <i>api.domain.com</i>
            or <i>api-domain.com</i>.
            </p>
<p>
    This may be useful if you have multiple sites, each with their own domain, 
    and you want all log messages to go to a single common URL.
</p>
<p>
    For example, this tells JSNLog to send all log requests to <i>http://my-api-domain.com</i>:
</p>
<pre>
&lt;jsnlog defaultAjaxUrl="http://my-api-domain.com/jsnlog.logger"&gt;
    ...
&lt;/jsnlog&gt;
</pre>

<h4>CORS</h4>
<p>
    An issue is that by default, browsers do not allow JavaScript (such as jsnlog.js) to 
    send AJAX requests to a domain different from the site domain.
</p>
<p>
    To make cross domain requests possible,
    the server has to implement 
    the 
    <a href="http://www.w3.org/TR/cors/" target="_blank">CORS</a>
    protocol. This allows the server to only accept requests from domains that it knows about. 
</p>
<p>
JSNLog 
implements 
the CORS protocol.
To 
    specify the domains that JSNLog should accept requests from, set 
        the        
        <i>corsAllowedOriginsRegex</i>
        attribute of the
            @Html.ViewLink("webconfig-jsnlog", "jsnlog element")
    in your web.config file    to a 
    <a href="http://www.regular-expressions.info/tutorial.html" target="_blank">regular expression</a>
     that matches
        all accepted domains.
</p>

<p>For example, this <i>jsnlog</i> element allows requests from 
    <i>my-abc-domain.com</i>,
    <i>my-xyz-domain.com</i>
    and all their sub domains, both over http and https:
</p>
<pre>
&lt;jsnlog corsAllowedOriginsRegex="^https?:\/\/([a-z0-9]+[.])*(my-abc-domain[.]com|my-xyz-domain[.]com)$"&gt;
    ...
&lt;/jsnlog&gt;
</pre>
<p>
    For a working example, see the 
    <i>EmptyLog4Net - CORS</i>
    project in the
    <a href="https://github.com/mperdeck/jsnlogSimpleWorkingDemos" target="_blank">simple working demos solution</a>
    on GitHub.
</p>

<p>
    You'll want to 
    <a href="https://regex101.com/" target="_blank">test your regular expression</a>
    before going into production.
</p>

<h4>CORS, Request Ids, and IE8/9</h4>
<p>
    If you use both cross domain log requests
    and  
                @Html.ViewLink("getstarted-requestids", "Request Ids")<text>,</text>
    you will not receive request ids from IE8 and IE9
    (<a href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers" target="_blank">usage share</a>).
</p>
<p>
    This is because CORS is implemented on IE8 and IE9 with the Microsoft specific
    <a href="https://msdn.microsoft.com/en-us/library/ie/cc288060(v=vs.85).aspx" target="_blank">XDomainRequest</a>,
    which
    <a href="http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx" target="_blank">does 
        not allow custom request headers</a> - and request ids are sent using a request header.
</p>
<p>
    <a href="https://msdn.microsoft.com/en-us/library/ie/hh872883(v=vs.85).aspx" target="_blank">IE10 and later</a>
    are standards compliant by adding CORS support to     
    <a href="https://msdn.microsoft.com/en-us/library/ie/hh772834(v=vs.85).aspx" target="_blank">XMLHTTPRequest</a>, 
    which does allow custom request headers.
</p>
<p>
    It may be possible to fix this issue in JSNLog. However, this has little priority seeing the age and dwindling usage share of IE8 and IE9.
</p>











