@using JSNLog
@using ViewExtensions

@{
    ViewBag.Title = "Getting Started";
    ViewBag.H1 = "Getting started with JavaScript logging";
    ViewBag.Key = "getstartedlogging";
    ViewBag.Description = "Start logging with JSNLog.";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    
    string currentVersion = PageVersions.CurrentVersion();
    if (currentVersion == "NodeJs") { currentVersion = "JsOnly"; }
}

@if (currentVersion == "NetJs")
{
    @Html.ViewLink("getstarted-demo", "Demos and sample code")
}

<h2>The Basics</h2>
<p>
    After you have 
                @Html.ViewLink("downloadinstall", "installed JSNLog"),
     add this to your JavaScript code to send a log message to your server side log:
</p>
<pre>JL().fatal("log message");</pre>

<p>
                @Html.ViewLink("jsnlogjs-jl-method", "JL()")
    
    returns a nameless logger, called the root logger. In your server side log,
    it will be called <span class="term">@Constants.RootLoggerNameServerSide</span>.
</p>

<a id="namedloggers"></a>
<h2>Named loggers</h2>
<p>
    You can give your loggers names, to make it easier to show where in your code the message was logged. For example:
</p>
<pre>JL("function1.logger1").fatal("log message");</pre>

<a id="logginglevels"></a>
<h2>Message severity</h2>
<p>
    Each log message has one of these severities:
   @Html.ViewLink("jsnlogjs-logger-trace", "TRACE"),
   @Html.ViewLink("jsnlogjs-logger-debug", "DEBUG"),
   @Html.ViewLink("jsnlogjs-logger-info", "INFO"),
   @Html.ViewLink("jsnlogjs-logger-warn", "WARN"),
   @Html.ViewLink("jsnlogjs-logger-error", "ERROR") or
   @Html.ViewLink("jsnlogjs-logger-fatal", "FATAL").
</p>
<p>
    Instead of one of these named severities, you can also use numbers: 
</p>
<pre>JL().log(2500, "log message with severity 2500");</pre>

@*======================================================================*@

<h2>Filtering out low priority messages using the level attribute</h2>

@if (currentVersion == "NetJs")
{

<p>
    In your web.config, you can 
    
                @Html.ViewLink("webconfig-logger", "configure your loggers")
     to only pass on messages with a given severity or higher using the <span class="term">level</span> attribute:
</p>
<pre>&lt;logger name="function1.logger1" level="ERROR" /&gt;</pre>
    
}

@if (currentVersion == "JsOnly")
{
    <p>
    In your JavaScript, you can 
    
                @Html.ViewLink("jsnlogjs-logger-setOptions", "configure your loggers")
     to only pass on messages with a given severity or higher:
</p>
<pre>JL("function1.logger1").setOptions({
    "level": JL.getInfoLevel()
});</pre>

}
    
<p>
    When setting a <span class="term">level</span>, in addition to 
       <span class="term">TRACE</span>,
   <span class="term">DEBUG</span>,
   <span class="term">INFO</span>,
   <span class="term">WARN</span>,
 <span class="term">ERROR</span>, or
  <span class="term">FATAL</span>, you can use:
</p>
    <ul>
        <li><span class="term">ALL</span> - to allow all log messages;</li>
        <li><span class="term">OFF</span> - to disallow all log messages.</li>
    </ul> 

<h2>Configuring multiple loggers through inheritance</h2>
<p>
    To make it easier to manage your loggers, they are organized in a 
    
@if (currentVersion == "NetJs")
{
                    @Html.ViewLink("webconfig-logger", "hierarchy", fragment: "inheritance")
}
@if (currentVersion == "JsOnly")
{
                    @Html.ViewLink("jsnlogjs-logger-setOptions", "hierarchy", fragment: "inheritance")
}

     based on their names:
</p>

<ul>
    <li>
        The parent of <span class="term">function1.logger1</span> is <span class="term">function1</span>;
    </li>
    <li>
        The parent of <span class="term">function1</span> is the root logger.
    </li>
</ul>

<p>
    Loggers inherit their attributes from their parents, unless you override them.
    Ultimately, they all inherit from the root logger.
</p>
@if (currentVersion == "NetJs")
{
<p>
    To set the level of the root logger, simply leave out the
    <span class="term">name</span> attribute:
</p>

<pre>&lt;!-- set level on root logger --&gt;
&lt;logger level="ERROR" /&gt;</pre>
}
@if (currentVersion == "JsOnly")
{
<p>
    To set the level of the root logger, simply leave out the name:
</p>

<pre>JL().setOptions({
    "level": JL.getInfoLevel()
});</pre>
}
<p>
By default, the root logger has level <span class="term">DEBUG</span>. 
    This means that by default, messages with severity <span class="term">TRACE</span> are not processed.  
</p>

<h2>Learn more</h2>
<p>
    JSNLog has many more features, such as:
</p>
<ul>
    <li>
        Batch multiple log messages before sending them to the server;
    </li>
    <li>
        Log trace information that may come in handy when
        a JavaScript exception occurs, but only send it if there actually is an exception.
    </li>
    <li>
        Use a request id to keep track of which log messages belong to the same web request.
    </li>
</ul>
<p>
    For more information, read these pages:
</p>
<ul>
    <li>@Html.ViewLink("getstarted-ajaxissues")</li>
    <li>@Html.ViewLink("getstarted-angularerrorhandling")</li>
    <li>@Html.ViewLink("getstarted-exceptionLogging")</li>
@if (currentVersion == "NetJs")
{
<li>@Html.ViewLink("getstarted-requestids")</li>
        <li>@Html.ViewLink("getstarted-loadingjsfile")</li>
<li>@Html.ViewLink("getstarted-loggingtoconsole")</li>
}
</ul>
