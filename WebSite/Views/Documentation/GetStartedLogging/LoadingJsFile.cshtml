@using ViewExtensions
@using WebSite.App_Code

@{
    ViewBag.Title = "AMD, Bundles, Browserify, cdnjs";
    ViewBag.Key = "getstarted-loadingjsfile";
    ViewBag.Description = "Discusses how to load the jsnlog.js library, including AMD, Bundles, Browserify and cdnjs";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

<p>
    This page is about loading the jsnlog.js JavaScript file onto your pages, including as part of a
    <a href="#bundle">bundle</a>,
    an
    <a href="#amd">AMD module</a> or with
    <a href="#browserify">Browserify</a>.
</p>

<h2>How jsnlog.js is loaded by default</h2>
<p>
    As part of the
    @Html.ViewLink("downloadinstall", "installation", null, "addtoyourpages")<text>,</text>
    you will have included a call to the
    @Html.ViewLink("javascriptlogging-configure", "Configure")
    method in your pages, using the line <span class="term">&#64;Html.Raw(JSNLog.JavascriptLogging.Configure())</span> if you use MVC.
    That method inserts a &lt;script&gt; tag that loads the jsnlog.min.js file. You can verify this by doing a View Source of the page.
</p>

<p>
    The url of the jsnlog.min.js file to be used in the &lt;script&gt; tag is specified by the
    <span class="term">productionLibraryPath</span>
    attribute of the
    @Html.ViewLink("webconfig-jsnlog")
    in your web.config.
</p>


<a id="loadfromcdn"></a>
<h2>Loading jsnlog.js from a free CDN</h2>
<p>
    By default, jsnlog.js is served from your own web server. If that web server is in the US and your visitor is in 
    Europe, the distance between the two delays loading of the file.
</p>
<p>
    To solve this, jsnlog.js is also hosted on <a href="@SiteConstants.CdnJsUrl" target="_blank">cdnjs</a>,
    meaning it is duplicated on servers all over the world. This means that a visitor in Europe will load the file
    from a server close by in Europe, etc. (<a href="https://www.cloudflare.com/network-map/" target="_blank">world wide locations</a>), reducing load times.
</p>
<p>
    All you need to do is change the download link in your web.config:
</p>
<ol>
    <li>
        Get the download link for the jsnlog.min.js file from <a href="@SiteConstants.CdnJsUrl" target="_blank">cdnjs</a>
    </li>
    <li>
        Plug that into the <span class="term">productionLibraryPath</span> attribute of the
        @Html.ViewLink("webconfig-jsnlog", "jsnlog")
        element in your web.config.
    </li>
</ol>
<p>
    For example:
</p>

<pre>&lt;jsnlog productionLibraryPath="<span class="addedcode">@SiteConstants.CdnJsDownloadUrl</span>"&gt;
   ...
&lt;/jsnlog&gt;
</pre>


<a id="stopscripttaggeneration"></a><h2>Stop automatic generation of script tag for jsnlog.js</h2>
<p>
    If you want to load the jsnlog.min.js file yourself, for example as part of a bundle or as an AMD module,
    you don't want the generated &lt;script&gt; tag. You can make it go away by simply removing the
    <span class="term">productionLibraryPath</span> attribute
    from the
    @Html.ViewLink("webconfig-jsnlog")
    in your web.config.
</p>
<pre>&lt;jsnlog <del>productionLibraryPath="~/Scripts/jsnlog.min.js"</del>&gt;
   ...
&lt;/jsnlog&gt;
</pre>
<p>
    Alternatively, you could simply remove the 
    line <span class="term">&#64;Html.Raw(JSNLog.JavascriptLogging.Configure())</span>,
    but that has a few more
            @Html.ViewLink("getstarted-configuration", 
            "implications",
            fragment: "cannotcallconfigure")<text>.</text>
</p>

<a id="amd"></a>
@Html.Partial("_LoadingAsAMD")


<a id="bundle"></a>
<h2>Loading jsnlog.js as part of a bundle</h2>

<p>
    ASP.NET's
    <a href="http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification">bundling feature</a>

    optimizes loading of your CSS and JavaScripot files in Release mode.
    It does this by using minified versions of the files and combining them in bundles.
</p>

<p>
    You can add jsnlog.js to any bundle, or put it in its own bundle.
    The NuGet package installs both <span class="term">jsnlog.js</span> and the minified <span class="term">jsnlog.min.js</span>.
    That way, the bundling feature can pick the right version depending on whether the site runs in Debug mode or Release mode.
</p>

<p>
    Assuming that you intend to load both jQuery and JSNLog in every page,
    you could add jsnlog.js to the jquery bundle in your
    <span class="term">BundleConfig</span> class:
</p>

<pre>bundles.Add(new ScriptBundle("~/bundles/jquery")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Include("~/Scripts/jquery-{version}.js")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="addedcode">.Include("~/Scripts/jsnlog.js")</span>);
</pre>

<a id="browserify"></a>
@Html.Partial("_LoadingWithBrowserify")





