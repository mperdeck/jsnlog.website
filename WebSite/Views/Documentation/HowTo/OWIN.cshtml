@using WebSite.App_Code
@using ViewExtensions

@{
    ViewBag.Title = "OWIN Configuration";
    ViewBag.H1 = "OWIN Configuration";
    ViewBag.Key = "getstarted-owin";
    ViewBag.Description = "Configuring JSNLog as an OWIN middleware";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
    ViewBag.VersionNameRegex = "NetJs";
}

<ul>
    <li>
        A working demo is in project 
        <a href="https://github.com/mperdeck/jsnlogSimpleWorkingDemos" target="_blank">EmptyLog4Net - OWIN</a>
    </li>
</ul>

<p>
    The server side component of JSNLog receives log requests from its client side counterpart jsnlog.js.
</p>
<p>
    It can receive and process those requests in one of these ways:
</p>
<ul>
    <li>
        As an <a href="https://msdn.microsoft.com/en-us/library/ms227675(v=vs.100).aspx" target="_blank">HTTP Handler</a>.
    </li>
    <li>
        An an <a href="http://www.asp.net/aspnet/overview/owin-and-katana" target="_blank">OWIN Middleware Component</a>.
    </li>
</ul>

<h2>Configuration as an HTTP Handler</h2>
<p>
    The  
    <a href="https://www.nuget.org/packages?q=jsnlog" target="_blank">JSNLog NuGet package</a>
    updates your web.config file to make it work as an HTTP Handler, by adding handlers to the 
    &lt;system.web&gt; and
    &lt;system.webServer&gt;
        sections. 
</p>    
<p>
    This means that you don't have to do any configuration yourself to use JSNLog as an
    HTTP Handler.
</p>

<h2>Configuration as an OWIN Middleware Component</h2>
<p>
    Take these steps after you have 
    @Html.ViewLink("downloadinstall", "installed the NuGet package")<text>:</text>
</p>
<ol>
    <li>
        <a id="owin-addtopipeline"></a>
        <b>Add JSNLog to your OWIN pipeline</b> in your Startup class:
        <p />
        <pre><span class="addedcode">using JSNLog;</span>
public class Startup
{
    public void Configuration(IAppBuilder app)
    {
        ...
        <span class="addedcode">app.UseJSNLog();</span>
        ...
    }
}</pre>
    </li>
    <li>
        <b>Update your web.config</b> -
        Remove the definitions that make JSNLog work as an HTTP Handler, and add a definition
         that sends
    all log requests to the OWIN handler:
        <p />
        <pre>&lt;configuration&gt;

    &lt;system.web&gt;
    &lt;httpHandlers&gt;
        ...
        &lt;!-- Remove this line --&gt;
        <del>&lt;add verb="*" path="*@SiteConstants.HandlerExtension" type="JSNLog.LoggerHandler, JSNLog" /&gt;</del>
    &lt;/httpHandlers&gt;
    &lt;/system.web&gt;

    &lt;system.webServer&gt;
    &lt;handlers&gt;
        ...
        &lt;!-- Remove these lines --&gt;
        <del>&lt;add name="LoggerHandler" verb="*" path="*@SiteConstants.HandlerExtension" type="JSNLog.LoggerHandler, JSNLog" resourceType="Unspecified" preCondition="integratedMode" /&gt;</del>
        <del>&lt;add name="LoggerHandler-Classic" path="*@SiteConstants.HandlerExtension" verb="*" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" resourceType="Unspecified" preCondition="classicMode" /&gt;</del>

        &lt;!-- 
        Add this line. 
        If you configure JSNLog to send log request to a url that 
        does NOT end in @SiteConstants.HandlerExtension (@Html.ViewLink("getstarted-cors", "how")), change the path attribute below.
        --&gt;
        <span class="addedcode">&lt;add name="Owin" verb="" path="*@SiteConstants.HandlerExtension" 
             type="Microsoft.Owin.Host.SystemWeb.OwinHttpHandler, Microsoft.Owin.Host.SystemWeb"/&gt;</span>
    &lt;/handlers&gt;
    &lt;/system.webServer&gt;

&lt;/configuration&gt;</pre>
        <p />
    </li>

</ol>

<h3>Where to place the JSNLog Component in the OWIN pipeline</h3>

        <p>
            When the 
            JSNLog Middleware Component
            receives a request, it checks whether it is a log request by checking the url:
        </p>
<ul>
    <li>
            If it finds it is log request, it processes the request and generates the response. It does not 
            pass the log request on further downstream.
    </li>
    <li>
If it is not a log request, it passes the request on downstream without any processing.
    </li>
</ul>

<p>
    This means you probably want JSNLog to be early in the pipeline, so other components do not see
    the log requests. 
</p>
<p>
    Some valid reasons to put components before JSNLog might be:
</p>
<ul>
    <li>
You only want to process log requests from authorized users.
    </li>
    <li>
        You have a component that somehow modifies log requests before they reach JSNLog.
    </li>
</ul>



