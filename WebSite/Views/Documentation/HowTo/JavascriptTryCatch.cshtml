@using ViewExtensions

@{
    ViewBag.Title = "Javascript Try Catch";
    ViewBag.Key = "getstarted-trycatch";
    ViewBag.Description = "Logging exceptions in a catch block.";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";

    var currentVersion = PageVersions.CurrentVersion();
}

<p>
    The 
    <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank">JavaScript Try Catch</a>
    statement lets you handle exceptions that are thrown in your code:
</p>

<pre>try {
    ...
    code that may throw exceptions
    ...
} catch (e) {
    ...
    code that somehow handles the exception, as passed in e
    ...
}</pre>

<p>
    What to when an exception happens? You'll probably want to show an error message to the user.
    But you'll also want to log the exception and its stack trace in your server side log with the
    @Html.ViewLink("jsnlogjs-logger-fatalException", "fatalException")
    method. That way, you at least know about it:
</p>

<pre>try {
    ...
    code that may throw exceptions
    ...
} catch (e) {
    ...
    show message to user
    ...
    <span class="addedcode">// Log the exception and its stack trace
    JL().fatalException("something went wrong!", e);</span>
}</pre>


<h2>More information, but only when you need it</h2>
<p>
    Often you need more information than provided in the exception to track down the cause of the JavaScript error.
    You might wind up logging debug information in various places in your JavaScript:
</p>

<pre>
function f1(a, b) {
    JL("f1").debug("information that may be useful when an exception happens");
    ...
}
&nbsp;
function f2(c, d) {
    JL("f2").debug("more information that may be useful when an exception happens");
    ...
}
&nbsp;
function f3() {
    try {
        ...
    } catch(e) {
        JL().fatalException("exception message", e);
    }
}
</pre>
<p>
    The problem is that now you'll be receiving lots of debug messages, even if there is no error.
    You do want the debug messages, but only if there is a JavaScript error.
</p>
<p>
    The solution is to have JSNLog store the debug messages in browser memory, and only send them when there is a fatal message.
</p>


@if (currentVersion == "NetJs")
{
    <p>
        To make that happen, you can configure your loggers like so
        <text>(</text>@Html.ViewLink("webconfig-ajaxappender", "details", null, "Remarks")<text>)</text>:
    </p>

@Html.Partial(@"Demos/_exceptions1")

    <p>
        This creates an
        @Html.ViewLink("webconfig-ajaxappender", "AjaxAppender")<text>,</text>
        the component that actually sends log messages to the server. Here it is configured to
        store the last 20 log messages with severity DEBUG or higher in browser memory. When there is a log message with severity FATAL,
        both the fatal message itself and the stored messages are sent to the server. If there is no fatal message, nothing is sent to the server.
    </p>
}

@if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
{
    <p>
        To make that happen, you can configure your loggers in your JavaScript like so
        <text>(</text>@Html.ViewLink("jsnlogjs-ajaxappender-setOptions", "details", null, "Remarks")<text>)</text>:
    </p>

<pre>var appender = JL.createAjaxAppender("appender");
appender.setOptions({
    "bufferSize": 20,
    "storeInBufferLevel": JL.getDebugLevel(),
    "level": JL.getFatalLevel(),
    "sendWithBufferLevel": JL.getFatalLevel()
});
JL().setOptions({ "appenders": [appender] });</pre>


    <p>
        This creates an
        @Html.ViewLink("jsnlogjs-ajaxappender", "AJAX Appender")<text>,</text>
        the component that actually sends log messages to the server. Here it is configured to
        store the last 20 log messages with severity DEBUG or higher in browser memory. When there is a log message with severity FATAL,
        both the fatal message itself and the stored messages are sent to the server. If there is no fatal message, nothing is sent to the server.
    </p>
}

<p>
    The last line associates the root logger with the new appender.
    Because all loggers inherit from the root logger, they will now all send their messages through the new AJAX Appender.
</p>



<h2>More about logging JavaScript exceptions</h2>
<ul>
    <li>
        @Html.ViewLink("jsnlogjs-logger-fatalException")
    </li>
    <li>
        @Html.ViewLink("jsnlogjs-exception")
    </li>
</ul>

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    <p>
        Similar to the
        <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank">standard Error object</a>,
        the Exception object allows you to throw a custom JavaScript exception when things go wrong:
    </p>
<pre>function f(i, j) {
    if (i &lt; 10) { 
        throw new JL.Exception("i is too small!");
    }
    ...
}</pre>

    <h3>Add information to aid in debugging</h3>
    <p>
        However, instead of a string, you can also pass in a JSON object with more information, to help you fix the issue:
    </p>
<pre>function f(i, j) {
    if (i &lt; 10) { 
        throw new JL.Exception({
            "message": "i is too small!",
            "i": i,
            "j": j    
        });
    }
    ...
}</pre>
    <a id="innerexception"></a>
    <h3>Add inner exceptions</h3>
    <p>
        The Exception object supports inner exceptions - essentially storing one exception within another.
        To see how this works, consider this code:
    </p>
    <pre>function f2(v) {
    var x, y;
    ... some code
    if (somethingWentWrong) {
        throw new JL.Exception({ "x": x, "y": y, "v": v });
    }
}<br />
function f1(anArray) {
    var i;    
    for(i = 0; i &lt; anArray.length; i++) {
        f2(anArray[i]);
    }
}<br />
try {
    f1([1, 2, 3]);
} catch(e) {
    JL().fatalException("Exception was thrown!", e);
}</pre>
    <p>
        Function f2 can throw an exception. If it does, it puts all relevant information in the exception to make fixing the problem easier.
    </p>
    <p>
        However, function f1 also has information that might be relevant, such as the value of the index i. It would be good to somehow add that information
        to the exception.
    </p>
    <p>
        It would be possible to catch the exception in function f1 and then throw a new exception that contains all the information stored by function f2 plus the
        index i. But that would be complicated, and we'd lose the stack trace of the original exception.
    </p>
    <p>
        The easiest solution is to catch the JavaScript exception in function f2, and then throw a new one that contains the original exception, plus any additional information.
        That way, we get to keep all the information stored in the original exception, including its stack trace.
        The changes are below in red:
    </p>
<pre>function f2(v) {
    var x, y;
    ... some code
    if (somethingWentWrong) {
        throw new JL.Exception({ "x": x, "y": y, "v": v });
    }
}<br />
function f1(anArray) {
    var i;    
    <span class="addedcode">try {</span>
        for(i = 0; i &lt; anArray.length; i++) {
            f2(anArray[i]);
        }
    <span class="addedcode">} catch(e) {
        // Throw new JavaScript exception that contains the original one
        throw new JL.Exception({ "i": i }, e);
    }</span>
}<br />
try {
    f1([1, 2, 3]);
} catch(e) {
    JL().fatalException("Exception was thrown!", e);
}</pre>

    <p>
        The fatalException function knows how to read the additional information and the inner exception from the Exception object, and will log it all.
    </p>

    <p>
        If you want to, there is nothing stopping you from having an inner exception that itself has an inner exception. You can go as deep as you want.
    </p>











