@using ViewExtensions

@{
    bool showWebConfigCode =
        ((string)(ViewData["configSource"]) == "web.config");

    string currentVersion = PageVersions.CurrentVersion();
}

<a id="calculate-ip-address"></a>
<h3>Working out the IP address of the sender of a request</h3>

<p>
    Working out the IP address of original sender of an HTTP request (that is, the user's browser) is not as simple
    as looking at the source address in the request.
</p>

<p>
    If your web server sits behind a load balancer, the source of the final request to the web server is not the browser, but the load balancer.
    The request may also have been passed on through intermediate proxies, causing the same issue. 
</p>

<p>
    The most common (but non-standard) solution to this is that 
    proxies and load balancers 
    (<a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html" target="_blank">such as AWS' Elastic Load Balancer</a>)
    send an 
    <a href="https://en.wikipedia.org/wiki/X-Forwarded-For" target="_blank">X_FORWARDED_FOR</a>
    request header with the IP addresses of the browser and any proxies that the request passed through, except for the final source address.
    JSNLog uses this request header to work out the IP address of the actual browser and the proxies and/or load balancer that the request passed through.
</p>
<p>
    JSNLog reports the IP address(es) of the sender(s) of the request as a string of text containing a comma separated list. First is the browser itself, then intermediate proxies
    (in the order in which they were reached) and then the load balancer if there is one:
</p>
<pre>
Browser IP address, Proxy 1, ..., Proxy N [, Load Balancer]
</pre>






