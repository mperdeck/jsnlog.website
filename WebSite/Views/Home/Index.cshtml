@using ViewExtensions
@using WebSite.App_Code

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    string currentVersion = PageVersions.CurrentVersion();

    switch (currentVersion)
    {
        case "NetJs":
            ViewBag.Title = "Logging JavaScript errors to your server side log";
            break;
        case "JsOnly":
            ViewBag.Title = "JavaScript logging redone";
            break;
        case "PhpJs":
            ViewBag.Title = "JavaScript logging for PHP";
            break;
        case "NodeJs":
            ViewBag.Title = "Log exceptions on client and server under Node.js";
            break;
        default:
            throw new Exception(string.Format("Unknown version {0}", currentVersion));
    }
}

@section Hero {
    <section class="hero">
    <div class="container">
        <div class="row">

            <div class="col-sm-8">
                @if (currentVersion == "NetJs")
                {
                    <h1>Log JavaScript <i>client side</i> events in your <i>server side</i> logs</h1>
                    <p>
                        This JavaScript logging package logs JavaScript errors, AJAX timeouts and other client side events in your server side log.
                        Supports
                        <a href="http://www.nuget.org/packages/JSNLog.Elmah/" target="_blank">Elmah</a>,
                        <a href="http://www.nuget.org/packages/JSNLog.Log4Net/" target="_blank">Log4Net</a>,
                        <a href="http://www.nuget.org/packages/JSNLog.NLog/" target="_blank">NLog</a>,
                        <a href="http://www.nuget.org/packages/JSNLog.Serilog/" target="_blank">Serilog</a>,
                        <a href="http://www.nuget.org/packages/JSNLog.CommonLogging/" target="_blank">Common.Logging</a>.
                    </p>
                }
                @if (currentVersion == "JsOnly")
                {
                    <h1>JavaScript logging redone</h1>
                    <p>
                        JSNLog.js
                        is a tiny JavaScript logging library, simple and well documented.
                        It has unique options to cut down on the amount of logging data you receive while
                        still getting the information you actually need.
                    </p>
                }
                @if (currentVersion == "NodeJs")
                {
                    <h1>Node.js logging package for both client and server</h1>
                    <p>
                        This Node.js logging package logs JavaScript errors and other events on both client and server.
                        Client side logs are sent to the server and logged there.
                        On the server logs to the console, or a database using
                        <a href="https://github.com/flatiron/winston#working-with-transports" target="_blank">Winston transports</a>.
                    </p>
                }
                @if (currentVersion == "PhpJs")
                {
                    <h1>JavaScript logging for PHP</h1>
                }
            </div>
            <div class="col-sm-4 hidden-xs">
                <div class="pull-right">
                    @Html.Raw(Html.Partial("Partials/_DownloadButton").ToHtmlString())
                </div>
            </div>

        </div>
    </div>
</section>
}

<section class="features">
    @if (currentVersion == "PhpJs")
    {
        <div class="col-sm-12">
            <p>
                Third party library integrating jsnlog.js with PHP:
            </p>
            <ul>
                <li><a target="_blank" href="https://github.com/pnellesen/JSPHPLog">JSPHPLog</a></li>
            </ul>

            <p>
                Use this library in your server side PHP. It uses the
                <a href="http://js.jsnlog.com">standard jsnlog.js JavaScript library</a> on the client.
            </p>
        </div>
    }
    else
    {
        <div class="container">
            <div class="row">
                <div class="col-sm-6 left-column">

                    @Feature(
                "",
                @"Vital Stats",
                                                                     @"
    <ul class=""halfspaced noindent"">
    <li>
    Supports IE 8+, Firefox, Chrome, Opera, Safari (desktop/mobile).
    </li>
    <li>
    Free, open source (<a href=""" + SiteConstants.LicenceUrl + @""" target=""_blank"">" + SiteConstants.LicenceName + @"</a>).
    </li>
    <li>
    Use stand alone, as an
    <a href=""http://requirejs.org/docs/why.html"" target=""_blank"">AMD module</a>
    or
    <a href=""http://spinejs.com/docs/commonjs"" target=""_blank"">CommonJS module</a>" +
    ((currentVersion == "NetJs") ?
        @", or with
        <a href=""http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification"" target=""_blank"">bundles</a>" : "") +
    @".
    </li>
    <li>
    No dependencies on other JavaScript libraries.
    </li>
    <li>
    Fully documented: API docs, examples, how to's" +
    ((currentVersion == "NetJs") ? @", videos" : "") +
    @".
    </li>
    </ul>
    ")

                    @if (currentVersion == "NetJs")
                    {
                        @Feature(
            "",
            @"Key concepts",
                           @"<ul class=""halfspaced noindent"">
            <li>
Insert loggers in your client side JavaScript, using jsnlog.js (" + SiteConstants.JsnlogJsFileSize + @" min+gz).
    </li>
            <li>
    Those loggers send your log messages to the JSNLog server side component.
            </li>
            <li>
    This logs the messages in your server side log, using your server side logging package.
    Supports Log4Net, NLog, Elmah, Common.Logging.
            </li>
            </ul>")
                    }

                    @*@if (currentVersion == "NetJs")
                        {*@
                </div>
                <div class="col-sm-6 right-column">
                    @*}*@


                    @if (currentVersion == "NetJs")
                    {
                        <section class="feature">
                            <h3 class="text">6 minute introduction</h3>
                            <iframe src="//player.vimeo.com/video/93994063?title=0&amp;byline=0&amp;portrait=0" width="430" height="242" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
                        </section>
                    }
                    @if (currentVersion == "NodeJs")
                    {
                        @Feature(
            "",
            @"Key concepts",
                           @"<ul class=""halfspaced noindent"">
            <li>
Use jsnlog.js (" + SiteConstants.JsnlogJsFileSize + @" min+gz) to log JavaScript exceptions and other events on both the client and the server.
    </li>
            <li>
    On the client, jsnlog.js sends log messages to the server. There they are received using jsnlog-nodejs.js and logged using the server side jsnlog.js.
            </li>
            <li>
    On the server, jsnlog.js by default sends log messages to the console.
Plug in <a href=""https://github.com/flatiron/winston#working-with-transports"" target=""_blank"">Winston transports</a> to log to MongoDB, Loggly, etc.
            </li>
            </ul>")
                    }

                    @*@if (currentVersion == "NetJs")
                        {*@
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row row-divider">


                <div class="col-sm-6 left-column">
                    @*}*@

                    <h2>Log important JavaScript events</h2>

                    @Feature(
                "",
                @"Insert loggers in your JavaScript",
                @"<pre>JL().info(""log message"");</pre>")

                    @Feature(
                "",
                @"Optionally use logger names",
                @"<pre>JL(""jsLogger"").info(""log message"");</pre>")

                    @Feature(
                "",
                @"Log JavaScript exceptions, with their stack traces",
                @"<pre>try {
        ...
    } catch(e) {
        JL().fatalException(""Exception info"", e);
    }</pre>")

                    @if (currentVersion == "NetJs")
                    {
                        @Feature(
            "",
            @"Configure loggers in your web.config",
            @"<pre>&lt;logger name=""jslogger"" level=""FATAL"" /&gt;</pre>
    ")
                    }

                    @if (currentVersion == "NetJs")
                    {
                        @Feature(
            "",
            @"Or configure them in your JavaScript code",
            @"<pre>JL(""jsLogger"").setOptions({ ""level"": 4000 });</pre>
    ")
                    }
                    @if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                    {
                        @Feature(
            "",
            @"Configure loggers in your JavaScript code",
            @"<pre>JL(""jsLogger"").setOptions({ ""level"": 4000 });</pre>
    ")
                    }

                    @*===========================================================*@@if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                    {
                        @Feature(
            "",
            @"Only log for certain user agents or IP addresses",
            @"<pre>JL().setOptions(
        { ""userAgentRegex"": ""MSIE 7|MSIE 8"" });</pre>
    ")
                    }

                    @*===========================================================*@@Feature(
            "",
            @"Log objects as well as strings",
            @"<pre>var obj = {""f1"": ""v1"", ""f2"": ""v2""};
    JL().log(2500, obj);</pre>
    ")
                    @Feature(
            "",
            @"Pass in function that returns log info",
            @"<pre>JL().log(2500, function() {
        // Only executed when log info
        // will actually be logged.
        var loginfo = expensiveOperation();
        return loginfo;
    });</pre>
    ")

                    @Feature(
            "",
            @"See which messages belong to the same request",
                     @"
    <table class=""log"">
    <tr><th style=""width: 120px"">Request ID</th><th>Message</th></tr>
    <tr><td class=""bgcolor2"">CB0734CE....</td><td>A debug message</td></tr>
    <tr><td class=""bgcolor1""><span>D623A22B....</span></td><td>An error message</td></tr>
    <tr><td  class=""bgcolor2"">CB0734CE....</td><td>Some other message</td></tr>
    <tr><td  class=""bgcolor1""><span>D623A22B....</span></td><td>Yet another message</td></tr>
    <tr><td  class=""bgcolor1"">D623A22B....</td><td>A fatal message</td></tr>
    <tr><td colspan=""2"">...</td></tr>
    </table>
    ")

                </div>
                <div class="col-sm-6 right-column">

                    <h2>Filter out what you don't need</h2>

                    @*===========================================================*@@if ((currentVersion == "NetJs"))
                    {
                        @Feature(
            "",
            @"Only log high severity messages",
                 @"<pre>// Only log messages with severity ERROR or higher<br/>&lt;logger level=""ERROR"" /&gt;</pre>
    ")

                        @Feature(
            "",
            @"Suppress messages that match a regular expression",
            @"<pre>&lt;logger disallow=""suppress me"" /&gt;</pre>
    ")
                    }
                    @if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                    {
                        @Feature(
            "",
            @"Only log high severity messages",
            @"<pre>// Only log messages with severity ERROR or higher<br/>JL().setOptions({ ""level"": JL.getErrorLevel() });</pre>
    ")

                        @Feature(
            "",
            @"Suppress messages that match a regular expression",
            @"<pre>JL(""jsLogger"").setOptions(
        { ""disallow"": ""suppress me"" });</pre>
    ")
                    }

                    @if (currentVersion == "NetJs")
                    {
                        @Feature(
            "",
            @"Only log for certain user agents or IP addresses",
            @"<pre>&lt;logger userAgentRegex=&quot;MSIE 7|MSIE 8&quot; /&gt;</pre>
    ")
                    }

                    @if (currentVersion == "NetJs")
                    {
                        @Feature(
            "",
            @"Limit total messages sent to server",
            @"<pre>&lt;jsnlog maxMessages=""3""&gt;</pre>
    ")
                    }
                    @if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                    {
                        @Feature(
            "",
            @"Limit total messages sent to server",
            @"<pre>JL.setOptions({""maxMessages"": 3});</pre>")
                    }

                    @*===========================================================*@@if (currentVersion == "NetJs")
                    {
                        @Feature(
            "",
            @"Reduce AJAX requests by batching log messages",
            @"<pre>&lt;ajaxAppender name=""appender1"" batchSize=""3""/&gt;</pre>
    ")
                    }
                    @if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                    {
                        @Feature(
            "",
            @"Reduce AJAX requests by batching log messages",
            @"<pre>appender.setOptions(
        { ""batchSize"": 3 });</pre>
    ")
                    }

                    @*===========================================================*@@if ((currentVersion == "JsOnly"))
                    {
                        @Feature(
            "",
            @"Easily send logging data to the server",
            @"Built in AjaxAppender uses simple, well documented message format.
    ")
                    }

                    @Feature(
            "",
            @"Suppress duplicate messages",
            @"
    <table class=""log"">
    <tr><th style=""width: 120px"">Logger</th><th>Message</th></tr>
    <tr><td>jsLogger</td><td>x too high (x = 5)</td></tr>
    <tr style=""text-decoration: line-through;""><td>jsLogger</td><td>x too high (x = 6)</td></tr>
    <tr style=""text-decoration: line-through;""><td>jsLogger</td><td>x too high (x = 7)</td></tr>
    <tr style=""text-decoration: line-through;""><td>jsLogger</td><td>x too high (x = 8)</td></tr>
    <tr style=""text-decoration: line-through;""><td>jsLogger</td><td>x too high (x = 9)</td></tr>
    </table>
    ")

                    @Feature(
            "",
            @"Get the info you need, but only <u>when</u> you need it",
            @"<ul class=""spaced noindent"">
            <li>
            To solve JavaScript exceptions, you often need to know what happened before they happened.
            </li>
            <li>
            But you don't want to send trace messages with that context unless there actually is an exception.
            </li>
            <li>
            Solution: JSNLog lets you buffer log messages on the client, and only send them
    when there is a fatal message.
            </li>
            </ul>")

                    @if (currentVersion != "NodeJs")
                    {
                        @Feature(
            "",
            @"Show log data in the console",
            @"Switch console logging on or off " +
    ((currentVersion == "NetJs") ? "in your web.config." : "with one line of code.") +
                    @"<p /><img src=""/Images/console.png"" alt=""screenshot of browser console with log generated by JSNLog"" width=""306"" height=""214"" />
            ")
                    }
                </div>
            </div>
        </div>
    }
</section>





@helper Feature(string title, string text, string code)
{
    @Html.Raw(@"<section class=""feature"">" +
            //"<h2>" + title + "</h2>" +
        @"<h3 class=""text"">" + text + "</h3>" +
        (string.IsNullOrEmpty(code) ? "" : @"<section class=""code"">" + code + "</section>") +
    "</section>")
}




