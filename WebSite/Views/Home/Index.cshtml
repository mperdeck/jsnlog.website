@using ViewExtensions
@using WebSite.App_Code

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    string currentVersion = PageVersions.CurrentVersion();

    switch (currentVersion)
    {
        case "NetJs":
            ViewBag.Title = "Logging JavaScript errors to your server side log";
            break;
        case "JsOnly":
            ViewBag.Title = "JavaScript logging redone";
            break;
        case "PhpJs":
            ViewBag.Title = "JavaScript logging for PHP";
            break;
        case "NodeJs":
            ViewBag.Title = "Log exceptions on client and server under Node.js";
            break;
        default:
            throw new Exception(string.Format("Unknown version {0}", currentVersion));
    }
}

@section Hero {
    <section class="hero">
    <div class="container">
        <div class="row">

            <div class="col-sm-8">
                @if (currentVersion == "NetJs")
                {
                    <h1>Log JavaScript <i>client side</i> events in your <i>server side</i> logs</h1>
                    <p>
                        This JavaScript logging package logs JavaScript errors, AJAX timeouts and other client side events in your server side log.
                        Supports
                        <a href="http://www.nuget.org/packages/JSNLog.Elmah/" target="_blank">Elmah</a>,
                        <a href="http://www.nuget.org/packages/JSNLog.Log4Net/" target="_blank">Log4Net</a>,
                        <a href="http://www.nuget.org/packages/JSNLog.NLog/" target="_blank">NLog</a>,
                        <a href="http://www.nuget.org/packages/JSNLog.Serilog/" target="_blank">Serilog</a>,
                        <a href="http://www.nuget.org/packages/JSNLog.CommonLogging/" target="_blank">Common.Logging</a>.
                    </p>
                }
                @if (currentVersion == "JsOnly")
                {
                    <h1>JavaScript logging redone</h1>
                    <p>
                        JSNLog.js
                        is a tiny JavaScript logging library, simple and well documented.
                        It has unique options to cut down on the amount of logging data you receive while
                        still getting the information you actually need.
                    </p>
                }
                @if (currentVersion == "NodeJs")
                {
                    <h1>Node.js logging package for both client and server</h1>
                    <p>
                        This Node.js logging package logs JavaScript errors and other events on both client and server.
                        Client side logs are sent to the server and logged there.
                        On the server logs to the console, or a database using
                        <a href="https://github.com/flatiron/winston#working-with-transports" target="_blank">Winston transports</a>.
                    </p>
                }
                @if (currentVersion == "PhpJs")
                {
                    <h1>JavaScript logging for PHP</h1>
                }
            </div>
            <div class="col-sm-4 hidden-xs">
                <div class="pull-right">
                    @Html.Raw(Html.Partial("Partials/_DownloadButton").ToHtmlString())
                </div>
            </div>

        </div>
    </div>
</section>
}

<section class="features">
    @if (currentVersion == "PhpJs")
    {
        <div class="col-sm-12">
            <p>
                Third party library integrating jsnlog.js with PHP:
            </p>
            <ul>
                <li><a target="_blank" href="https://github.com/pnellesen/JSPHPLog">JSPHPLog</a></li>
            </ul>

            <p>
                Use this library in your server side PHP. It uses the
                <a href="http://js.jsnlog.com">standard jsnlog.js JavaScript library</a> on the client.
            </p>
        </div>
    }
    else
    {
        if (currentVersion == "NetJs")
        {
            <div class="container">
                <div class="row">
                    <div class="col-sm-12">
                        <h2>Install JSNLog</h2>
                        <p>
                            Logs uncaught JavaScript exceptions to your server side logs out of the box. Lets you log other client side events such as AJAX time outs.
                        </p>
                    </div>

                    <div class="col-sm-6 left-column">
                        <h3>1. Install NuGet package</h3>

                        <table class="table">
                            <tr>
                                <th>If you use</th>
                                <th>Install this NuGet package</th>
                            </tr>
                            <tr>
                                <td>Log4Net</td>
                                <td><a href="https://www.nuget.org/packages/JSNLog.Log4Net/" target="_blank">Install-Package JSNLog.Log4Net</a></td>
                            </tr>
                            <tr>
                                <td>NLog</td>
                                <td><a href="https://www.nuget.org/packages/JSNLog.NLog/" target="_blank">Install-Package JSNLog.NLog</a></td>
                            </tr>
                            <tr>
                                <td>Elmah</td>
                                <td><a href="https://www.nuget.org/packages/JSNLog.Elmah/" target="_blank">Install-Package JSNLog.Elmah</a></td>
                            </tr>
                        </table>

                        <p>
                            <a data-toggle="collapse" href="#collapseVS2013" aria-expanded="false" aria-controls="collapseVS2013">Click here if you use Visual Studio 2013 or older</a>
                        </p>
                        <div class="collapse" id="collapseVS2013">
                            <p>
                                These packages contain dependencies for both ASP.NET 4.x and ASP.NET Core.
                                However, versions below 2.8.60318.667 of the NuGet Package Manager installed in Visual Studio do not support this.
                            </p>
                            <p>
                                To check your Nuget version and upgrade if needed:
                            </p>
                            <ol>
                                <li>
                                    In Visual Studio, open <span class="term">Tools</span> | <span class="term">Extensions and Updates...</span>;
                                </li>
                                <li>
                                    Click <span class="term">Updates</span> (in left hand menu);
                                </li>
                                <li>
                                    If an update of NuGet Package Manager is available, click <span class="term">Update</span>.
                                </li>
                            </ol>
                        </div>

                        <p>
                            If you use Serilog, Common.Logging, OWIN, WebForms, flat HTML files or ASP.NET CORE, 
                            @Html.ViewLink("downloadinstall", "click here")<text>.</text>
                        </p>

                    </div>
                    <div class="col-sm-6 right-column">
                        <h3>2. Add JSNLog to your pages</h3>

                        <p>
                            Add this code to your pages, before any script tags:
                        </p>
                        @Html.Partial("_CallingConfigureMvc")
                        <p>
                            Your _Layout.cshtml or _Layout.vbhtml would probably be a good place for this.
                        </p>

                        <h3>3. See how to log other client side events</h3>
                        <p>
                            By default, JSNLog logs all uncaught JavaScript exceptions to your server side logs.
                            @Html.ViewLink("getstartedlogging", "Click here to start logging other events to your server side logs as well")<text>.</text>
                        </p>
                    </div>
                </div>
            </div>
        }

        <div class="container">
            @{ 
                string cssClass = "row";
                if (currentVersion == "NetJs") { cssClass += " row-divider homepage-row-grey"; }
            }

            <div class="@cssClass">
                <div class="col-sm-6 left-column">
                    @if ((currentVersion == "NetJs") || (currentVersion == "NodeJs"))
                    {
                        @Helpers.Feature(
            "",
            @"Why use JSNLog",
                           @"<ul class=""midsize-items"">
            <li>
You probably log server side exceptions and other events using a logging package such as " +
                    ((currentVersion == "NetJs") ? "Log4Net, Elmah, or NLog." : "Winston.") +
            @"</li>

                        <li>
            However, you're not logging " +
                    ((currentVersion == "NetJs") ? "JavaScript" : "client side") +
            @" events. This makes fixing bugs in live " +
                    ((currentVersion == "NetJs") ? "JavaScript" : "client side") +
            @" code much harder.
                        </li>

                        <li>
            Fix this by installing JSNLog. It logs exceptions out of the box.

                        </li>

                        <li>
            And you can log other JavaScript events as well, such as " +
            Html.ViewLink("getstarted-ajaxissues", "AJAX timeouts") +
            @":
<pre>JL().error(""..message.."");</pre>
</li>
            <li>
JSNLog sends the log data to the server and into your server side log.
</li>
            <li>
Your logs now have both the server and client side events. You can correlate them with request ids.
</li>
            <li>
" + Html.ViewLink("downloadinstall", "Install JSNLog") + @"
</li>
            </ul>")
                    }

                    @if (currentVersion == "NetJs")
                    {

                        @Helpers.Feature(
                        "",
                        @"Demos and sample code",
                                       @"<ul class=""halfspaced noindent"">
    <li>
        <a href=" + SiteConstants.DemoGithubUrl + @" target=""_blank"">Code of simple working ASP.NET 4.x demo sites</a>
    </li>
    <li>
        <a href=" + SiteConstants.DemoAspNet5GithubUrl + @" target=""_blank"">Code of simple working ASP.NET Core demo site</a>
    </li>
    <li>
        <a href=" + SiteConstants.AngularJsDemoGithubUrl + @" target=""_blank"">Code of simple AngularJs app using JSNLog</a>
    </li>
            </ul>")
                    }


                    @if (!((currentVersion == "NetJs") || (currentVersion == "NodeJs")))
                    {
                        @Html.Partial("Partials/_VitalStats")
                    }

                </div>
                <div class="col-sm-6 right-column">

                    @if (currentVersion == "NetJs")
                    {
                        <section class="feature">
                            <h3 class="text">6 minute introduction</h3>
                            <iframe src="//player.vimeo.com/video/93994063?title=0&amp;byline=0&amp;portrait=0" width="430" height="242" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
                        </section>
                    }

                    @if ((currentVersion == "NetJs") || (currentVersion == "NodeJs"))
                    {
                        @Html.Partial("Partials/_VitalStats")
                    }

                </div>
            </div>
        </div>

                    <div class="container">
                        <div class="row row-divider">


                            <div class="col-sm-6 left-column">

                                <h2>Log important JavaScript events</h2>

                                @Helpers.Feature(
                "",
                @"Insert loggers in your JavaScript",
                @"<pre>JL().info(""log message"");</pre>")

                                @Helpers.Feature(
                "",
                @"Optionally use logger names",
                @"<pre>JL(""jsLogger"").info(""log message"");</pre>")

                                @Helpers.Feature(
                "",
                @"Log JavaScript exceptions, with their stack traces",
                @"<pre>try {
        ...
    } catch(e) {
        JL().fatalException(""Exception info"", e);
    }</pre>")

                                @if (currentVersion == "NetJs")
                                {
                                    @Helpers.Feature(
            "",
            @"Configure loggers in your web.config",
            @"<pre>&lt;logger name=""jslogger"" level=""FATAL"" /&gt;</pre>
    ")
                                }

                                @if (currentVersion == "NetJs")
                                {
                                    @Helpers.Feature(
            "",
            @"Or in server side code",
            @"<pre>loggers = new List<Logger>
{
    new Logger { name = ""jsLogger"", level = ""FATAL"" }
}</pre>
    ")
                                }

                                @if (currentVersion == "NetJs")
                                {
                                    @Helpers.Feature(
            "",
            @"Or configure them in your JavaScript code",
            @"<pre>JL(""jsLogger"").setOptions({ ""level"": 4000 });</pre>
    ")
                                }
                                @if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                                {
                                    @Helpers.Feature(
            "",
            @"Configure loggers in your JavaScript code",
            @"<pre>JL(""jsLogger"").setOptions({ ""level"": 4000 });</pre>
    ")
                                }

                                @*===========================================================*@@if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                                {
                                    @Helpers.Feature(
            "",
            @"Only log for certain user agents or IP addresses",
            @"<pre>JL().setOptions(
        { ""userAgentRegex"": ""MSIE 7|MSIE 8"" });</pre>
    ")
                                }

                                @*===========================================================*@@Helpers.Feature(
            "",
            @"Log objects as well as strings",
            @"<pre>var obj = {""f1"": ""v1"", ""f2"": ""v2""};
    JL().log(2500, obj);</pre>
    ")
                                @Helpers.Feature(
            "",
            @"Pass in function that returns log info",
            @"<pre>JL().log(2500, function() {
        // Only executed when log info
        // will actually be logged.
        var loginfo = expensiveOperation();
        return loginfo;
    });</pre>
    ")

                                @Helpers.Feature(
            "",
            @"See which messages belong to the same request",
                     @"
    <table class=""log"">
    <tr><th style=""width: 120px"">Request ID</th><th>Message</th></tr>
    <tr><td class=""bgcolor2"">CB0734CE....</td><td>A debug message</td></tr>
    <tr><td class=""bgcolor1""><span>D623A22B....</span></td><td>An error message</td></tr>
    <tr><td  class=""bgcolor2"">CB0734CE....</td><td>Some other message</td></tr>
    <tr><td  class=""bgcolor1""><span>D623A22B....</span></td><td>Yet another message</td></tr>
    <tr><td  class=""bgcolor1"">D623A22B....</td><td>A fatal message</td></tr>
    <tr><td colspan=""2"">...</td></tr>
    </table>
    ")

                                @if (currentVersion == "NetJs")
                                {
                                    @Helpers.Feature(
            "",
            @"Use a single logging end point for multiple sites",
            @"<pre>&lt;jsnlog defaultAjaxUrl=""http://my-api-domain.com" + SiteConstants.DefaultDefaultAjaxUrl + @"""
  corsAllowedOriginsRegex=""^http://my-xyz-domain[.]com$""&gt;
&lt;/jsnlog&gt;
</pre>
    ")
                                }

                            </div>
                            <div class="col-sm-6 right-column">

                                <h2>Filter out what you don't need</h2>

                                @*===========================================================*@@if ((currentVersion == "NetJs"))
                                {
                                    @Helpers.Feature(
            "",
            @"Only log high severity messages",
                 @"<pre>// Only log messages with severity ERROR or higher<br/>&lt;logger level=""ERROR"" /&gt;</pre>
    ")

                                    @Helpers.Feature(
            "",
            @"Suppress messages that match a regular expression",
            @"<pre>&lt;logger disallow=""suppress me"" /&gt;</pre>
    ")
                                }
                                @if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                                {
                                    @Helpers.Feature(
            "",
            @"Only log high severity messages",
            @"<pre>// Only log messages with severity ERROR or higher<br/>JL().setOptions({ ""level"": JL.getErrorLevel() });</pre>
    ")

                                    @Helpers.Feature(
            "",
            @"Suppress messages that match a regular expression",
            @"<pre>JL(""jsLogger"").setOptions(
        { ""disallow"": ""suppress me"" });</pre>
    ")
                                }

                                @if (currentVersion == "NetJs")
                                {
                                    @Helpers.Feature(
            "",
            @"Only log for certain user agents or IP addresses",
            @"<pre>&lt;logger userAgentRegex=&quot;MSIE 7|MSIE 8&quot; /&gt;</pre>
    ")
                                }

                                @if (currentVersion == "NetJs")
                                {
                                    @Helpers.Feature(
            "",
            @"Limit total messages sent to server",
            @"<pre>&lt;jsnlog maxMessages=""3""&gt;</pre>
    ")
                                }
                                @if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                                {
                                    @Helpers.Feature(
            "",
            @"Limit total messages sent to server",
            @"<pre>JL.setOptions({""maxMessages"": 3});</pre>")
                                }

                                @*===========================================================*@@if (currentVersion == "NetJs")
                                {
                                    @Helpers.Feature(
            "",
            @"Reduce AJAX requests by batching log messages",
            @"<pre>&lt;ajaxAppender name=""appender1"" batchSize=""3""/&gt;</pre>
    ")
                                }
                                @if ((currentVersion == "JsOnly") || (currentVersion == "NodeJs"))
                                {
                                    @Helpers.Feature(
            "",
            @"Reduce AJAX requests by batching log messages",
            @"<pre>appender.setOptions(
        { ""batchSize"": 3 });</pre>
    ")
                                }

                                @*===========================================================*@@if ((currentVersion == "JsOnly"))
                                {
                                    @Helpers.Feature(
            "",
            @"Easily send logging data to the server",
            @"Built in AjaxAppender uses simple, well documented message format.
    ")
                                }

                                @Helpers.Feature(
            "",
            @"Suppress duplicate messages",
            @"
    <table class=""log"">
    <tr><th style=""width: 120px"">Logger</th><th>Message</th></tr>
    <tr><td>jsLogger</td><td>x too high (x = 5)</td></tr>
    <tr style=""text-decoration: line-through;""><td>jsLogger</td><td>x too high (x = 6)</td></tr>
    <tr style=""text-decoration: line-through;""><td>jsLogger</td><td>x too high (x = 7)</td></tr>
    <tr style=""text-decoration: line-through;""><td>jsLogger</td><td>x too high (x = 8)</td></tr>
    <tr style=""text-decoration: line-through;""><td>jsLogger</td><td>x too high (x = 9)</td></tr>
    </table>
    ")

                                @Helpers.Feature(
            "",
            @"Get the info you need, but only <u>when</u> you need it",
            @"<ul class=""spaced noindent"">
            <li>
            To solve JavaScript exceptions, you often need to know what happened before they happened.
            </li>
            <li>
            But you don't want to send trace messages with that context unless there actually is an exception.
            </li>
            <li>
            Solution: JSNLog lets you buffer log messages on the client, and only send them
    when there is a fatal message.
            </li>
            </ul>")

                                @if (currentVersion != "NodeJs")
                                {
                                    @Helpers.Feature(
            "",
            @"Show log data in the console",
            @"Switch console logging on or off in one central location." +
                    @"<p /><img src=""/Images/console.png"" alt=""screenshot of browser console with log generated by JSNLog"" width=""306"" height=""214"" />
            ")
                                }
                            </div>
                        </div>
                    </div>
    }
</section>








